#!/usr/bin/perl -w
#
# check_calls_were_made.pl
#
# Make sure that all the calls which should have been made were made.
#
# Author: Allen Caldwell
#

use strict ;
use DBI() ;
use Getopt::Long qw(:config no_ignore_case bundling) ;
use lib "/usr/local/nagios/libexec" ;
use utils qw($TIMEOUT %ERRORS &print_revision &support &usage) ; # Import predefined status-codes and timeout variable
use File::Basename ;

my $row = "" ;
my $dsn = 'DBI:mysql:gv:127.0.0.1' ;
my $db_user_name = 'gvuser' ;
my $db_password = 'gotvoice' ;
my $sec = "" ;
my $min = "" ;
my $hour = "" ;
my $mday = "" ;
my $mon = "" ;
my $year = "" ;
my $wday = "" ;
my $yday = "" ;
my $isdst = "" ;
my $date = "" ;
my $prog_ver   = "1.0" ;
my $prog_name  = basename $0 ;
my $status = 3 ; #do we want to start with UNKNOWN???
my $status_print = "" ;
my $warn_val = 1 ;  # Default - override with -w arg
my $crit_val = 5 ;  # Default - override with -c arg
my $help_val = 0 ;  # Off unless -h arg
my $verb_val = 0 ;  # Off unless -v arg
my $vers_val = 0 ;  # Off unless -V arg

#get and format the date...
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time) ;
#format the day.
if ( $mday <= 9 ) { $mday = "0" . $mday ; }

if ( $wday == 0 ) { $wday = "Sunday" ; }
elsif ( $wday == 1 ) { $wday = "Monday" ; }
elsif ( $wday == 2 ) { $wday = "Tuesday" ; }
elsif ( $wday == 3 ) { $wday = "Wednesday" ; }
elsif ( $wday == 4 ) { $wday = "Thursday" ; }
elsif ( $wday == 5 ) { $wday = "Friday" ; }
else { $wday = "Saturday" ; }

#format the month.
if ($mon == 0) { $mon = "January" ; }
elsif ($mon == 1) { $mon = "February" ; }
elsif ($mon == 2) { $mon = "March" ; }
elsif ($mon == 3) { $mon = "April" ; }
elsif ($mon == 4) { $mon = "May" ; }
elsif ($mon == 5) { $mon = "June" ; }
elsif ($mon == 6) { $mon = "July" ; }
elsif ($mon == 7) { $mon = "August" ; }
elsif ($mon == 8) { $mon = "September" ; }
elsif ($mon == 9) { $mon = "October" ; }
elsif ($mon == 10) { $mon = "November" ; }
else  { $mon = "December" ; }

#format the hour.
if ( $hour <=9 ) { $hour += "0" ; }

#format the year.
$year += 1900 ;

$date = ( $year . "-" . $mon . "-" .  $mday . " " . $hour ) ;

					
# Gives us a way to print out verbose debug information to the screen when user
# passes in a -v argument.
# print_debug() should receive one parameter: a text string to print out.
sub print_debug() {
    my $message = shift;
    if ($verb_val == 1) {
        print "DEBUG: " . $message . "\n" ;
    }
}

# Show help information
sub show_help() {
    print '

Perl-Check the gv database calls that should have been made but werent made.

Usage: $prog_name -w  -c  [-h] [-V] [-v]

-w, --warning=INTEGER
   Number of calls which should have been made but were not to generate a warning state (Default: 1)
-c, --critical=INTEGER
   Number of calls which should have been made but were not to generate a critical state (Default: 5)
-h, --help
   Show this help
-V, --version
   Output version information for the plugin
-v, --verbose
   Enable verbose output
'
}

GetOptions (
		"w=i" => \$warn_val, "warning=i" => \$warn_val,
        "c=i" => \$crit_val, "critical=i" => \$crit_val,
        "h" => \$help_val, "help" => \$help_val,
        "V" => \$vers_val, "version" => \$vers_val,
        "v" => \$verb_val, "verbose" => \$verb_val,
) ;

if ($help_val != 0) {
    &show_help;
    exit $ERRORS{'OK'} ;
}

if ($vers_val != 0) {
    &print_revision($prog_name,$prog_ver);
    exit $ERRORS{'OK'} ;
}
#
#
#  The meat of the program...
#
#
#Do the database stuff...
my $dbh = DBI->connect($dsn, $db_user_name, $db_password, { 'RaiseError' => 1 }) ;
#See if there are any accounts in error...
my $count_statement = "SELECT count(*) from (
					SELECT A1.phoneid from
					( 
  					SELECT t3.phoneid as phoneid
  					FROM schedules_profile_xref t1, schedules_timeslots t2, phone t3, account t4
  					WHERE t1.activeflag = 'true'
  					AND t1.scheduleid = t2.scheduleid
  					AND t2.day = '$wday'
  					AND t2.hr = '$hour'
  					AND t1.phoneid = t3.phoneid
  					AND t3.status = 'active'
  					AND t3.accountid = t4.accountid
  					AND t4.accountstatus <> 'cancelled'
  					order by phoneid
					) A1
					where phoneid NOT IN
					(
  					select phoneid
  					from callhistory
  					where man_or_auto = 'auto'
  					and date_format(start_time, '%Y-%M-%d %H') = '$date'
 					) ) A2 " ;
&print_debug("count statement: $count_statement" ) ;
my $sth = $dbh->prepare( $count_statement ) ;
$sth->execute()
		or die "Couldn't execute query '$sth': $DBI::errstr\n" ;
my $how_many = $sth->fetchrow_array() ;
&print_debug("Number of calls that should have been made but were not: $how_many." ) ;

#We've got our number, now let's figure out what to return...
#Nagios protocol requires a <= .
if ( $how_many <= $warn_val ) { $status = $ERRORS{'OK'} ;
								$status_print = "OK" ; }
elsif ( $how_many > $warn_val && $how_many <= $crit_val ) { $status = $ERRORS{'WARNING'} ;
								$status_print = "WARNING" ;}
elsif ( $how_many > $crit_val ) { $status = $ERRORS{'CRITICAL'} ;
								$status_print = "CRITICAL" ; }
else { $status = $ERRORS{'UNKNOWN'} ;
	   $status_print = "UNKNOWN" ; }
	   
#let's send back the stuff we need to send back...single descriptive line printed and 
#exit value for nagios.
print $status_print . " - " .
         $how_many . " call(s) that should have been made were not made." ;
exit $status ;