<HTML
><HEAD
><TITLE
>Linux BRIDGE-STP-HOWTO</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.63
"></HEAD
><BODY
CLASS="ARTICLE"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="ARTICLE"
><DIV
CLASS="TITLEPAGE"
><H1
CLASS="TITLE"
><A
NAME="AEN1"
>Linux BRIDGE-STP-HOWTO</A
></H1
><H3
CLASS="AUTHOR"
><A
NAME="AEN5"
>Uwe Böhme</A
></H3
><DIV
CLASS="AFFILIATION"
><DIV
CLASS="ADDRESS"
><P
CLASS="ADDRESS"
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Johann-Heinrich-Abt-Straße 7<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;95213<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Münchberg<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Germany<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+49/9251 960877<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+49/9251 960878<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uwe@bnhof.de<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</P
></DIV
></DIV
><H3
CLASS="AUTHOR"
><A
NAME="AEN17"
>Lennert Buytenhenk</A
></H3
><DIV
CLASS="AFFILIATION"
><SPAN
CLASS="JOBTITLE"
>bridge code maintainer and developer<BR></SPAN
><SPAN
CLASS="ORGNAME"
>gnu.org<BR></SPAN
><DIV
CLASS="ADDRESS"
><P
CLASS="ADDRESS"
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buytenh@gnu.org<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</P
></DIV
></DIV
><SPAN
CLASS="RELEASEINFO"
>Release v0.04<BR></SPAN
><P
CLASS="COPYRIGHT"
>Copyright &copy; 2000
       by Uwe Böhme
      </P
><DIV
CLASS="REVHISTORY"
><TABLE
WIDTH="100%"
BORDER="0"
><TR
><TH
ALIGN="LEFT"
VALIGN="TOP"
COLSPAN="3"
><B
>Revision History</B
></TH
></TR
><TR
><TD
ALIGN="LEFT"
>Revision v0.04</TD
><TD
ALIGN="LEFT"
>11 January 2001</TD
><TD
ALIGN="LEFT"
>Revised by: U.B.</TD
></TR
><TR
><TD
ALIGN="LEFT"
COLSPAN="3"
>Changed Lennert`s Bridge Homepage URL; added NIC to list.</TD
></TR
><TR
><TD
ALIGN="LEFT"
>Revision v0.03</TD
><TD
ALIGN="LEFT"
>17 July 2000</TD
><TD
ALIGN="LEFT"
>Revised by: U.B.</TD
></TR
><TR
><TD
ALIGN="LEFT"
COLSPAN="3"
>Overwork pdf. Download links in doc.</TD
></TR
><TR
><TD
ALIGN="LEFT"
>Revision v0.02</TD
><TD
ALIGN="LEFT"
>16 July 2000</TD
><TD
ALIGN="LEFT"
>Revised by: U.B.</TD
></TR
><TR
><TD
ALIGN="LEFT"
COLSPAN="3"
>Fixed broken graphics in html dsl. Prepared pdf. Typos.</TD
></TR
><TR
><TD
ALIGN="LEFT"
>Revision v0.01</TD
><TD
ALIGN="LEFT"
>25 June 2000</TD
><TD
ALIGN="LEFT"
>Revised by: U.B.</TD
></TR
><TR
><TD
ALIGN="LEFT"
COLSPAN="3"
>Changes name from BRIDGE-HOWTO to BRIDGE-STP-HOWTO (avoid
          interference with BRIDGE-HOWTO by Christopher Cole) and kill
          version 1.xx.
          Lennert Buytenhenk announced as coauthor.</TD
></TR
><TR
><TD
ALIGN="LEFT"
>Revision v0.00</TD
><TD
ALIGN="LEFT"
>01 June 2000</TD
><TD
ALIGN="LEFT"
>Revised by: U.B.</TD
></TR
><TR
><TD
ALIGN="LEFT"
COLSPAN="3"
>Initial Release.</TD
></TR
></TABLE
></DIV
><HR></DIV
><DIV
CLASS="TOC"
><DL
><DT
><B
>Table of Contents</B
></DT
><DT
>1. <A
HREF="#LICENSE"
>License</A
></DT
><DT
>2. <A
HREF="#HOME-AND-DOWNLOAD"
>Document Home and Downloads</A
></DT
><DD
><DL
><DT
>2.1. <A
HREF="#THE-SOURCE"
>The Bridge Sources And Utilities</A
></DT
><DT
>2.2. <A
HREF="#THE-MAILLIST"
>The Mailing-List</A
></DT
><DT
>2.3. <A
HREF="#THIS-DOCUMENT"
>This Document</A
></DT
></DL
></DD
><DT
>3. <A
HREF="#WHAT-IS-A-BRIDGE"
>What Is A Bridge?</A
></DT
><DT
>4. <A
HREF="#RULES-ON-BRIDGING"
>Rules On Bridging</A
></DT
><DT
>5. <A
HREF="#PREPARING-THE-BRIDGE"
>Preparing The Bridge</A
></DT
><DD
><DL
><DT
>5.1. <A
HREF="#GET-THE-FILES"
>Get The Files</A
></DT
><DT
>5.2. <A
HREF="#APPLY-THE-PATCHES"
>Apply The Patches</A
></DT
><DT
>5.3. <A
HREF="#CONFIGURE-THE-KERNEL"
>Configure The Kernel</A
></DT
><DT
>5.4. <A
HREF="#COMPILE-THE-KERNEL"
>Compile The Kernel</A
></DT
><DT
>5.5. <A
HREF="#COMPILE-THE-UTILS"
>Compile The Bridge Utilities</A
></DT
></DL
></DD
><DT
>6. <A
HREF="#SET-UP-THE-BRIDGE"
>Set Up The Bridge</A
></DT
><DD
><DL
><DT
>6.1. <A
HREF="#BRCTL-SYNOPSIS"
><B
CLASS="COMMAND"
>brctl</B
> Command Synopsis</A
></DT
><DT
>6.2. <A
HREF="#BASIC-SETUP"
>Basic Setup</A
></DT
></DL
></DD
><DT
>7. <A
HREF="#ADVANCED-BRIDGE"
>Advanced Bridge Features</A
></DT
><DD
><DL
><DT
>7.1. <A
HREF="#STP"
>Spanning Tree Protocol</A
></DT
><DT
>7.2. <A
HREF="#IPCHAINS"
>Bridge And The IP-Chains</A
></DT
></DL
></DD
><DT
>8. <A
HREF="#PRACTICAL-EXAMPLE"
>A Practical Setup Example</A
></DT
><DD
><DL
><DT
>8.1. <A
HREF="#AEN590"
>Hardware-setup</A
></DT
><DT
>8.2. <A
HREF="#AEN609"
>Software-setup</A
></DT
><DT
>8.3. <A
HREF="#SEE-IT-WORK"
>See It Work</A
></DT
><DT
>8.4. <A
HREF="#BRIDGE-TESTS"
>Bridge Tests</A
></DT
><DD
><DL
><DT
>8.4.1. <A
HREF="#TEAR-THE-PATCH-WIRE-TEST"
>Tear The Patch Wire Test</A
></DT
><DT
>8.4.2. <A
HREF="#KILL-THE-ROOT-BRIDGE-TEST"
>Kill The Root Bridge Test</A
></DT
></DL
></DD
></DL
></DD
><DT
>A. <A
HREF="#NIC-INFO"
>Network Interface Cards</A
></DT
><DT
>B. <A
HREF="#RECOMMENDED-READING"
>Recommended Reading</A
></DT
><DT
>C. <A
HREF="#FAQ"
>FAQ</A
></DT
></DL
></DIV
><FONT
COLOR="RED"
>About The Linux Modular Bridge And STP</FONT
><BLOCKQUOTE
CLASS="ABSTRACT"
><DIV
CLASS="ABSTRACT"
><A
NAME="AEN70"
></A
><P
></P
><P
>This document describes how to setup a bridge with the
      recent kernel patches and brctl utility by Lennert Buytenhek.
      and tries to explain about the STP implementation in this
      code.
    </P
><P
></P
></DIV
></BLOCKQUOTE
><P
>With developer kernel 2.3.47 the new bridging code is part of the
    mainstream.
    There are patches for stable kernels 2.2.14 to 2.2.16, where each
    is also available as a ipchains-patch.
  </P
><DIV
CLASS="SECT1"
><HR><H1
CLASS="SECT1"
><A
NAME="LICENSE"
>1. License</A
></H1
><P
>Copyright (c) 2000 by Uwe Böhme.
    This document may be distributed only subject to the terms and conditions
    set forth in the <A
HREF="./COPYRIGHT.html"
TARGET="_top"
><SPAN
CLASS="ACRONYM"
>LDP</SPAN
> License</A
> available at
    <A
HREF="http://www.linuxdoc.org//manifesto.html"
TARGET="_top"
>http://www.linuxdoc.org/</A
>
  </P
></DIV
><DIV
CLASS="SECT1"
><HR><H1
CLASS="SECT1"
><A
NAME="HOME-AND-DOWNLOAD"
>2. Document Home and Downloads</A
></H1
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="THE-SOURCE"
>2.1. The Bridge Sources And Utilities</A
></H2
><P
>Official url is
      <A
HREF="http://www.math.leidenuniv.nl/~buytenh/bridge/"
TARGET="_top"
>http://www.math.leidenuniv.nl/~buytenh/bridge/</A
>.
      With developer kernel 2.3.47 the new bridging code is part of the mainstream.
    </P
></DIV
><DIV
CLASS="SECT2"
><HR><H2
CLASS="SECT2"
><A
NAME="THE-MAILLIST"
>2.2. The Mailing-List</A
></H2
><P
>The Bridge-Mailinglist is homed at
      <A
HREF="http://www.math.leidenuniv.nl/mailman/listinfo/bridge"
TARGET="_top"
>http://www.math.leidenuniv.nl/mailman/listinfo/bridge</A
>.
    </P
></DIV
><DIV
CLASS="SECT2"
><HR><H2
CLASS="SECT2"
><A
NAME="THIS-DOCUMENT"
>2.3. This Document</A
></H2
><P
>This document has it's official homepage at
      <A
HREF="http://www.bnhof.de/~uwe/bridge-stp-howto/BRIDGE-STP-HOWTO/"
TARGET="_top"
>http://www.bnhof.de/~uwe/bridge-stp-howto/BRIDGE-STP-HOWTO/</A
>.
      It's a part of the Linux Documentation Project located at
      <A
HREF="http://www.linuxdoc.org/"
TARGET="_top"
>http://www.linuxdoc.org/</A
>.
    </P
><P
></P
><DIV
CLASS="VARIABLELIST"
><P
><B
>Download Types and Locations</B
></P
><DL
><DT
>Build environment as tar.gziped file</DT
><DD
><P
>            <A
HREF="http://www.bnhof.de/~uwe/bridge-stp-howto/BRIDGE-STP-HOWTO.tar.gz"
TARGET="_top"
>http://www.bnhof.de/~uwe/bridge-stp-howto/BRIDGE-STP-HOWTO.tar.gz</A
>
          </P
></DD
><DT
>HTML-gziped file</DT
><DD
><P
>            <A
HREF="http://www.bnhof.de/~uwe/bridge-stp-howto/BRIDGE-STP-HOWTO.html.tar.gz"
TARGET="_top"
>http://www.bnhof.de/~uwe/bridge-stp-howto/BRIDGE-STP-HOWTO.html.tar.gz</A
>
          </P
></DD
><DT
>PDF-gziped file</DT
><DD
><P
>            <A
HREF="http://www.bnhof.de/~uwe/bridge-stp-howto/BRIDGE-STP-HOWTO.pdf.gz"
TARGET="_top"
>http://www.bnhof.de/~uwe/bridge-stp-howto/BRIDGE-STP-HOWTO.pdf.gz</A
>
          </P
></DD
><DT
>PS-gziped file</DT
><DD
><P
>            <A
HREF="http://www.bnhof.de/~uwe/bridge-stp-howto/BRIDGE-STP-HOWTO.ps.gz"
TARGET="_top"
>http://www.bnhof.de/~uwe/bridge-stp-howto/BRIDGE-STP-HOWTO.ps.gz</A
>
          </P
></DD
></DL
></DIV
></DIV
></DIV
><DIV
CLASS="SECT1"
><HR><H1
CLASS="SECT1"
><A
NAME="WHAT-IS-A-BRIDGE"
>3. What Is A Bridge?</A
></H1
><P
>A bridge is a device that separates two or more network segments
    within one logical network (e.g. a single IP-subnet).
  </P
><P
>A bridge is usually placed between two separate groups of computers
    that talk with each other, but not that much with the computers in
    the other group.
    A good example of this is to consider a cluster of Macintoshes and a
    cluster of Unix machines.
    Both of these groups of machines tend to be quite chatty amongst
    themselves, and the traffic they produce on the network causes
    collisions for the other machines who are trying to speak to one
    another.
  </P
><P
>The job of the bridge is to examine the destination of the
    data packets one at a time and decide whether or not to pass the
    packets to the other side of the Ethernet segment.
    The result is a faster, quieter network with less collisions.
  </P
><P
>The bridging code decides whether to bridge data or to drop it not
    by looking at the protocol type (IP, IPX, NetBEUI), but by looking at
    the <SPAN
CLASS="ACRONYM"
>MAC</SPAN
>-address unique to each NIC.
  </P
><DIV
CLASS="IMPORTANT"
><BLOCKQUOTE
CLASS="IMPORTANT"
><P
><B
>Important: </B
>It's vital to understand that a bridge is neither a router nor
      a fire-wall.
      Spoken in simple term a bridge behaves like a network switch
      (i.e. Layer 2 Switch), making it a transparent network component
      (which is not absolutely true, but nearly).
      Read more about this at <A
HREF="#RULES-ON-BRIDGING"
>Section 4</A
>.
    </P
></BLOCKQUOTE
></DIV
><P
>In addition, you can overcome hardware incompatibilities with a
    bridge, without leaving the address-range of your IP-net or subnet.
    E.g. it's possible to bridge between different physical media like
    10 Base T and 100 Base TX.
  </P
><P
>My personal reason for starting to set up a bridge was that in my
    work I had to connect Fast Ethernet components to a existing HP
    Voice Grade network, which is a proprietary networking standard.
  </P
><P
></P
><DIV
CLASS="VARIABLELIST"
><P
><B
>Features Above Pure Bridging</B
></P
><DL
><DT
>STP</DT
><DD
><P
>The Spanning Tree Protocol is a nifty method of keeping
          Ethernet devices connected in multiple paths working.
          The participating switches negotiate the shortest available path
          by STP.
          This feature will be discussed in
          <A
HREF="#STP"
>Section 7.1</A
>.
        </P
></DD
><DT
>Multiple Bridge Instances</DT
><DD
><P
>Multiple bridge instances allow you to have more than one
          bridge on your box up and running, and to control each instance
          separately.
        </P
></DD
><DT
>Fire-walling</DT
><DD
><P
>There is a patch to the bridging code which allows you
          to use IP chains on the interface inside a bridge.
          More info about this you'll find at
          <A
HREF="#IPCHAINS"
>Section 7.2</A
>.
        </P
></DD
></DL
></DIV
></DIV
><DIV
CLASS="SECT1"
><HR><H1
CLASS="SECT1"
><A
NAME="RULES-ON-BRIDGING"
>4. Rules On Bridging</A
></H1
><P
>There is a number of rules you are not allowed to break
    (otherwise your bridge will do).
  </P
><P
></P
><UL
COMPACT="COMPACT"
><LI
><P
>A port can only be a member of one bridge.
      </P
></LI
><LI
><P
>A bridge knows nothing about routes.
      </P
></LI
><LI
><P
>A bridge knows nothing about higher protocols than <SPAN
CLASS="ACRONYM"
>ARP</SPAN
>.
        That's the reason why it can bridge any possible protocol
        possibly running on your Ethernet.
      </P
></LI
><LI
><P
>No matter how many ports you have in your logical bridge,
        it's covered by only one logical interface
      </P
></LI
><LI
><P
>As soon as a port (e.g. a NIC) is added to a bridge you have no
        more direct control about it.
      </P
></LI
></UL
><DIV
CLASS="WARNING"
><P
></P
><TABLE
CLASS="WARNING"
BORDER="1"
WIDTH="100%"
><TR
><TD
ALIGN="CENTER"
><B
>Warning</B
></TD
></TR
><TR
><TD
ALIGN="LEFT"
><P
>If one of the points mentioned above is not clear to you now,
      don't continue reading.
      Read the documents listed in <A
HREF="#RECOMMENDED-READING"
>Appendix B</A
>
      first.
    </P
></TD
></TR
></TABLE
></DIV
><P
>If you ever tried to ping an unmanaged switch, you will know that
    it doesn't work, because you don't have a IP-address for it.
    To switch datagrams it doesn't need one.
    The other thing is if you want to manage the switch.
    It's too much strain, to take a dumb terminal, walk to the
    place you installed it (normally a dark, dusty and warm
    room, with a lot of green and red Christmas lights), to connect the
    terminal and to change the settings.
  </P
><P
>What you want is remote management, usually by SNMP, telnet, rlogin
    or (best) ssh.
    For all this services you will need a IP.
    That's the exception to the transparency.
    The new code allows you without any problem to assign a IP address to
    the virtual interface formed by the bridge-instance you will create
    in <A
HREF="#BASIC-SETUP"
>Section 6.2</A
>.
    All NIC's (or other interfaces) in your bridge will happily listen and
    respond to datagrams destined to this IP.
  </P
><P
>All other data will not interfere with the bridge.
    The bridge just acts like a switch.
  </P
></DIV
><DIV
CLASS="SECT1"
><HR><H1
CLASS="SECT1"
><A
NAME="PREPARING-THE-BRIDGE"
>5. Preparing The Bridge</A
></H1
><P
>This section describes what you need and how you do to prepare
    your bridge.
  </P
><DIV
CLASS="SECT2"
><HR><H2
CLASS="SECT2"
><A
NAME="GET-THE-FILES"
>5.1. Get The Files</A
></H2
><P
>Here you can find a list of the files and down-loads you will need
      for the setup of the bridge.
      If you have one of the mentioned files or packages on your
      distribution, of course there is no need to create network load.
    </P
><P
>I'll only mention the files for the 2.2.14 kernel.
      If you want to try a different one (e.g. 2.2.15 or the recent
      development kernel) just replace the kernel version number and
      look whether you find it.
    </P
><DIV
CLASS="IMPORTANT"
><BLOCKQUOTE
CLASS="IMPORTANT"
><P
><B
>Important: </B
>You have read the <EM
>abstract</EM
>, didn't you?
        So you know that there is no need to download any kernel-patch if
        you're working with a kernel later than 2.3.47.
      </P
></BLOCKQUOTE
></DIV
><P
></P
><DIV
CLASS="VARIABLELIST"
><P
><B
>File and package list</B
></P
><DL
><DT
>Unpatched kernel-sources</DT
><DD
><P
>E.g. <TT
CLASS="FILENAME"
>linux-2.2.14.tar.bz2</TT
> available
            from your local kernel.org mirror.
            Please check first if you find it in your distribution (take
            unpatched kernel-sources).
            If you don't, please check
            <A
HREF="http://www.kernel.org/mirrors/"
TARGET="_top"
>The Linux Kernel
            Archive Mirror System</A
> for a close by mirror and down-load
            it from there.
          </P
></DD
><DT
>Bridge patches</DT
><DD
><DIV
CLASS="NOTE"
><BLOCKQUOTE
CLASS="NOTE"
><P
><B
>Note: </B
>If your kernel is later than 2.3.47 you don't need this.
              The bridging is part of the mainstream from that version.
            </P
></BLOCKQUOTE
></DIV
><P
>Get the bridge kernel patches for your kernel
            version from
            <A
HREF="http://www.math.leidenuniv.nl/~buytenh/bridge/"
TARGET="_top"
>http://www.math.leidenuniv.nl/~buytenh/bridge/</A
>.
            Identify the file by the kernel number.
          </P
><P
>            <DIV
CLASS="NOTE"
><BLOCKQUOTE
CLASS="NOTE"
><P
><B
>Note: </B
>There are also patches allowing to work with IP chains.
                I never tried it, for I don't see the need to fire-wall
                inside my LAN, and absolutely no need to bridge against
                the outer world. Feel free to contribute about that issue.
              </P
></BLOCKQUOTE
></DIV
>
          </P
><DIV
CLASS="FORMALPARA"
><P
><B
>Kernel patches for the stable 2.2 kernel. </B
>
              <P
></P
><DIV
CLASS="VARIABLELIST"
><P
><B
>Available Kernel patches</B
></P
><DL
><DT
>bridge-0.0.9-against-2.2.18.diff, the main kernel patch against 2.2.18</DT
><DD
><P
>                      <A
HREF="http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-0.0.9-against-2.2.18.diff"
TARGET="_top"
>http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-0.0.9-against-2.2.18.diff</A
>
                    </P
></DD
><DT
>bridge-ipchains-against-0.0.9-against-2.2.18.diff, an add-on patch for bridge firewalling against 2.2.18</DT
><DD
><P
>                      <A
HREF="http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-ipchains-against-0.0.9-against-2.2.18.diff"
TARGET="_top"
>http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-ipchains-against-0.0.9-against-2.2.18.diff</A
>
                    </P
></DD
><DT
>bridge-0.0.8-against-2.2.18pre19.diff, the main kernel patch against 2.2.18pre19.</DT
><DD
><P
>                      <A
HREF="http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-0.0.8-against-2.2.18pre19.diff"
TARGET="_top"
>http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-0.0.8-against-2.2.18pre19.diff</A
>
                    </P
></DD
><DT
>bridge-0.0.8-against-2.2.17-0.5.diff, the main kernel patch against 2.2.17-0.5</DT
><DD
><P
>                      <A
HREF="http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-0.0.8-against-2.2.17-0.5.diff"
TARGET="_top"
>http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-0.0.8-against-2.2.17-0.5.diff</A
>
                    </P
></DD
><DT
>bridge-ipchains-against-0.0.8-against-2.2.18pre19.diff, an add-on patch for bridge firewalling against 2.2.18pre19</DT
><DD
><P
>                      <A
HREF="http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-ipchains-against-0.0.8-against-2.2.18pre19.diff"
TARGET="_top"
>http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-ipchains-against-0.0.8-against-2.2.18pre19.diff</A
>
                    </P
></DD
><DT
>bridge-ipchains-against-0.0.8-against-2.2.17-0.5.diff, an add-on patch for bridge firewalling against 2.2.17-0.5</DT
><DD
><P
>                      <A
HREF="http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-ipchains-against-0.0.8-against-2.2.17-0.5.diff"
TARGET="_top"
>http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-ipchains-against-0.0.8-against-2.2.17-0.5.diff</A
>
                    </P
></DD
><DT
>bridge-0.0.7-against-2.2.18pre15.diff, the main kernel patch against 2.2.18pre15</DT
><DD
><P
>                      <A
HREF="http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-0.0.7-against-2.2.18pre15.diff"
TARGET="_top"
>http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-0.0.7-against-2.2.18pre15.diff</A
>
                    </P
></DD
><DT
>bridge-ipchains-against-0.0.7-against-2.2.18pre15.diff, an add-on patch for bridge firewalling against 2.2.18pre15</DT
><DD
><P
>                      <A
HREF="http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-ipchains-against-0.0.7-against-2.2.18pre15.diff"
TARGET="_top"
>http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-ipchains-against-0.0.7-against-2.2.18pre15.diff</A
>
                    </P
></DD
><DT
>bridge-0.0.7-against-2.2.17.diff, the main kernel patch against 2.2.17</DT
><DD
><P
>                      <A
HREF="http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-0.0.7-against-2.2.17.diff"
TARGET="_top"
>http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-0.0.7-against-2.2.17.diff</A
>
                    </P
></DD
><DT
>bridge-ipchains-against-0.0.7-against-2.2.17.diff, an add-on patch for bridge firewalling against 2.2.17</DT
><DD
><P
>                      <A
HREF="http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-ipchains-against-0.0.7-against-2.2.17.diff"
TARGET="_top"
>http://www.math.leidenuniv.nl/~buytenh/bridge/patches/bridge-ipchains-against-0.0.7-against-2.2.17.diff</A
>
                    </P
></DD
></DL
></DIV
>
            </P
></DIV
></DD
><DT
>Bridge configuration utilities</DT
><DD
><P
>You also will need the bridge configuration utilities to
            set up the bridge <A
HREF="#SET-UP-THE-BRIDGE"
>Section 6</A
>.
            You can also download them from <A
HREF="http://www.math.leidenuniv.nl/~buytenh/bridge/"
TARGET="_top"
>http://www.math.leidenuniv.nl/~buytenh/bridge/</A
>.
          </P
></DD
></DL
></DIV
></DIV
><DIV
CLASS="SECT2"
><HR><H2
CLASS="SECT2"
><A
NAME="APPLY-THE-PATCHES"
>5.2. Apply The Patches</A
></H2
><DIV
CLASS="NOTE"
><BLOCKQUOTE
CLASS="NOTE"
><P
><B
>Note: </B
>If your kernel is later than 2.3.47 you don't need this.
        The bridging is part of the mainstream from that version.
      </P
></BLOCKQUOTE
></DIV
><P
>Apply the bridging patch your kernel.
      If you don`t know <EM
>how to</EM
> do that read the
      Kernel-HOWTO which can be found in your distribution or at
      <A
HREF="http://www.linuxdoc.org/HOWTO/Kernel-HOWTO.html"
TARGET="_top"
>http://www.linuxdoc.org/HOWTO/Kernel-HOWTO.html</A
>
    </P
><DIV
CLASS="EXAMPLE"
><A
NAME="APPLY-KERNEL-PATCH-SAMPLE"
></A
><P
><B
>Example 1. Applying a kernel patch</B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:~ # cd /usr/src/linux-2.2.14
root@mbb-1:/usr/src/linux-2.2.14 # patch -p1 &#60; \
    <TT
CLASS="USERINPUT"
><B
>bridge-0.0.5-against-2.2.14.diff</B
></TT
>
.
.
      </PRE
></TD
></TR
></TABLE
></DIV
></DIV
><DIV
CLASS="SECT2"
><HR><H2
CLASS="SECT2"
><A
NAME="CONFIGURE-THE-KERNEL"
>5.3. Configure The Kernel</A
></H2
><P
>Now it's time we configure our freshly patched kernel to create
      the ability to bridge.
    </P
><P
>Run <B
CLASS="COMMAND"
>make config</B
>,
      <B
CLASS="COMMAND"
>make menuconfig</B
> or the
      <SPAN
CLASS="ACRONYM"
>click-o-rama</SPAN
> <B
CLASS="COMMAND"
>make xconfig</B
>.
      Select <B
CLASS="COMMAND"
>bridging</B
> in the <B
CLASS="COMMAND"
>networking
      option</B
> section to be compiled as a module.
      AFAIK there is no strong reason why <EM
>not</EM
> to
      compile it as a kernel module, whereas I heard rumors about
      problems with compiling the bridging code directly into the kernel.
    </P
><DIV
CLASS="INFORMALEXAMPLE"
><A
NAME="AEN277"
></A
><P
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:~ # cd /usr/src/linux-2.2.14
root@mbb-1:/usr/src/linux-2.2.14 # make menuconfig
.
      </PRE
></TD
></TR
></TABLE
><P
></P
></DIV
></DIV
><DIV
CLASS="SECT2"
><HR><H2
CLASS="SECT2"
><A
NAME="COMPILE-THE-KERNEL"
>5.4. Compile The Kernel</A
></H2
><P
>Compile your kernel <A
HREF="#KERNEL-COMPILE-COMMANDS"
>Example 2</A
>.
      Make the new compiled kernel-image to be loaded.
      I don't know if the kernel patches only apply to the bridging-module
      or also modify some interfaces inside <TT
CLASS="FILENAME"
>vmlinuz</TT
>.
      So it might not be a error to give a reboot after you updated the
      kernel-image.
    </P
><DIV
CLASS="EXAMPLE"
><A
NAME="KERNEL-COMPILE-COMMANDS"
></A
><P
><B
>Example 2. Commands To Compile Your Kernel</B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:/usr/src/linux-2.2.14 # make dep clean zImage modules modules_install zlilo
...
      </PRE
></TD
></TR
></TABLE
></DIV
></DIV
><DIV
CLASS="SECT2"
><HR><H2
CLASS="SECT2"
><A
NAME="COMPILE-THE-UTILS"
>5.5. Compile The Bridge Utilities</A
></H2
><P
>This is how to compile and install from the scratch.
      Just <B
CLASS="COMMAND"
>unzip</B
> the utilities-tarball, <B
CLASS="COMMAND"
>cd</B
>
      into the newly created directory and give a <B
CLASS="COMMAND"
>make</B
>.
    </P
><DIV
CLASS="EXAMPLE"
><A
NAME="UTILS-COMPILE-COMMANDS"
></A
><P
><B
>Example 3. Commands To Compile Your Bridge-Utilities</B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:/usr/src/linux-2.2.14 # cd /usr/local/src
root@mbb-1:/usr/local/src/ # tar xzvf <TT
CLASS="USERINPUT"
><B
>bridge-utils-0.9.1.tar.gz</B
></TT
>
.....
....
root@mbb-1:/usr/local/src # cd bridge
root@mbb-1:/usr/local/src/bridge # make
.....
....
      </PRE
></TD
></TR
></TABLE
></DIV
><P
>After the compilation shown in
      <A
HREF="#UTILS-COMPILE-COMMANDS"
>Example 3</A
> have worked properly, you
      can copy the executables to let's say
      <TT
CLASS="FILENAME"
>/usr/local/sbin/</TT
> (at least I did).
      So the commands you have to give should be clear, but to be complete
      see <A
HREF="#UTILS-COPY-BINARIES"
>Example 4</A
>
    </P
><DIV
CLASS="EXAMPLE"
><A
NAME="UTILS-COPY-BINARIES"
></A
><P
><B
>Example 4. Copy The Binaries Of The Utilities</B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:/usr/local/src/bridge # cd brctl
root@mbb-1:/usr/local/src/bridge/brctl # cp brctl /usr/local/sbin
root@mbb-1:/usr/local/src/bridge/brctl # chmod 700 /usr/local/sbin/brctl
root@mbb-1:/usr/local/src/bridge/brctl # cp brctld /usr/local/sbin
root@mbb-1:/usr/local/src/bridge/brctl # chmod 700 /usr/local/sbin/brctld
      </PRE
></TD
></TR
></TABLE
></DIV
><P
>Also now you can copy the new man-page to a decent place,
      as shown in <A
HREF="#UTILS-COPY-MANPAGE"
>Example 5</A
>.
    </P
><DIV
CLASS="EXAMPLE"
><A
NAME="UTILS-COPY-MANPAGE"
></A
><P
><B
>Example 5. Copy The Man-page Of brctl</B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:/usr/local/src/bridge # cd doc
root@mbb-1:/usr/local/src/bridge/doc #  gzip -c brctl.8 &#62; /usr/local/man/man8/brctl.8.gz
      </PRE
></TD
></TR
></TABLE
></DIV
></DIV
></DIV
><DIV
CLASS="SECT1"
><HR><H1
CLASS="SECT1"
><A
NAME="SET-UP-THE-BRIDGE"
>6. Set Up The Bridge</A
></H1
><P
>Make sure all your network cards are working nicely
    and are accessible.
    If so, <B
CLASS="COMMAND"
>ifconfig</B
> will show you the hardware layout
    of the network-interface.
    If you have problems making your cards work please read the
    Ethernet-HOWTO at
    <A
HREF="http://www.linuxdoc.org/HOWTO/Ethernet-HOWTO.html"
TARGET="_top"
>http://www.linuxdoc.org/HOWTO/Ethernet-HOWTO.html</A
>.
    Don't mess around with IP-addresses or net-masks.
    You will not need it, until you bridge fully operational an up.
  </P
><P
>After you did the steps mentioned above a
    <B
CLASS="COMMAND"
>modprobe -v bridge</B
> should show no errors.
    You can check the success by issuing a
    <B
CLASS="COMMAND"
>cat /proc/modules</B
>.
    Also for each of the network cards you want to use in the bridge
    the <B
CLASS="COMMAND"
>ifconfig <TT
CLASS="USERINPUT"
><B
>whateverNameYourInterfaceHas</B
></TT
></B
>
    should give you some information about the interface.
  </P
><P
>If your <SPAN
CLASS="APPLICATION"
>bridge-utilities</SPAN
> have been
    correctly built and your kernel and bridge-module are OK, then
    issuing a <B
CLASS="COMMAND"
>brctl</B
> should show a small command
    synopsis.
  </P
><DIV
CLASS="SECT2"
><HR><H2
CLASS="SECT2"
><A
NAME="BRCTL-SYNOPSIS"
>6.1. <B
CLASS="COMMAND"
>brctl</B
> Command Synopsis</A
></H2
><P
>      <TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:~ # brctl
commands:
    addbr           &#60;bridge&#62;                add bridge                      <A
NAME="BRCTL-ADDBR"
><IMG
SRC="../images/callouts/1.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(1)"></A
>
    addif           &#60;bridge&#62; &#60;device&#62;       add interface to bridge         <A
NAME="BRCTL-ADDIF"
><IMG
SRC="../images/callouts/2.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(2)"></A
>
    delbr           &#60;bridge&#62;                delete bridge                   <A
NAME="BRCTL-DELBR"
><IMG
SRC="../images/callouts/3.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(3)"></A
>
    delif           &#60;bridge&#62; &#60;device&#62;       delete interface from bridge    <A
NAME="BRCTL-DELIF"
><IMG
SRC="../images/callouts/4.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(4)"></A
>
    show                                    show a list of bridges          <A
NAME="BRCTL-SHOW"
><IMG
SRC="../images/callouts/5.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(5)"></A
>
    showbr          &#60;bridge&#62;                show bridge info                <A
NAME="BRCTL-SHOWBR"
><IMG
SRC="../images/callouts/6.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(6)"></A
>
    showmacs        &#60;bridge&#62;                show a list of mac addrs        <A
NAME="BRCTL-SHOWMACS"
><IMG
SRC="../images/callouts/7.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(7)"></A
>

    setageing       &#60;bridge&#62; &#60;time&#62;         set ageing time                 <A
NAME="BRCTL-SETAGEING"
><IMG
SRC="../images/callouts/8.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(8)"></A
>
    setbridgeprio   &#60;bridge&#62; &#60;prio&#62;         set bridge priority             <A
NAME="BRCTL-SETBRIDGEPRIO"
><IMG
SRC="../images/callouts/9.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(9)"></A
>
    setfd           &#60;bridge&#62; &#60;time&#62;         set bridge forward delay        <A
NAME="BRCTL-SETFD"
><IMG
SRC="../images/callouts/10.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(10)"></A
>
    setgcint        &#60;bridge&#62; &#60;time&#62;         set garbage collection interval <A
NAME="BRCTL-SETGCINT"
><B
>(11)</B
></A
>
    sethello        &#60;bridge&#62; &#60;time&#62;         set hello time                  <A
NAME="BRCTL-SETHELLO"
><B
>(12)</B
></A
>
    setmaxage       &#60;bridge&#62; &#60;time&#62;         set max message age             <A
NAME="BRCTL-SETMAXAGE"
><B
>(13)</B
></A
>
    setpathcost     &#60;bridge&#62; &#60;port&#62; &#60;cost&#62;  set path cost                   <A
NAME="BRCTL-SETPATHCOST"
><B
>(14)</B
></A
>
    setportprio     &#60;bridge&#62; &#60;port&#62; &#60;prio&#62;  set port priority               <A
NAME="BRCTL-SETPORTPRIO"
><B
>(15)</B
></A
>
    stp             &#60;bridge&#62; &#60;state&#62;        {dis,en}able stp                <A
NAME="BRCTL-STP"
><B
>(16)</B
></A
>
      </PRE
></TD
></TR
></TABLE
>

    </P
><DIV
CLASS="CALLOUTLIST"
><DL
COMPACT="COMPACT"
><DT
><A
HREF="#BRCTL-ADDBR"
><IMG
SRC="../images/callouts/1.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(1)"></A
><A
HREF="#BRCTL-DELBR"
><IMG
SRC="../images/callouts/3.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(3)"></A
></DT
><DD
>The
          <B
CLASS="COMMAND"
>brctl addbr <TT
CLASS="USERINPUT"
><B
>bridgename</B
></TT
></B
>
          command creates a logical bridge instance with the name
          <TT
CLASS="USERINPUT"
><B
>bridgename</B
></TT
>.
          You will need at least one logical instance to do any bridging at
          all.
          You can interpret the logical bridge being a container for the
          interfaces taking part in the bridging.
          Each bridging instance is represented by a new network interface.
        </DD
><DIV
CLASS="EXAMPLE"
><A
NAME="CREATE-A-INSTANCE"
></A
><P
><B
>Example 6. Creating A Instance</B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:~ # brctl addbr mybridge1
         </PRE
></TD
></TR
></TABLE
></DIV
><DD
><P
>The corresponding <SPAN
CLASS="QUOTE"
>"shutdown"</SPAN
> command is
          <B
CLASS="COMMAND"
>brctl delbr <TT
CLASS="USERINPUT"
><B
>bridgename</B
></TT
></B
>.
          <DIV
CLASS="CAUTION"
><P
></P
><TABLE
CLASS="CAUTION"
BORDER="1"
WIDTH="100%"
><TR
><TD
ALIGN="CENTER"
><B
>Caution</B
></TD
></TR
><TR
><TD
ALIGN="LEFT"
><P
><B
CLASS="COMMAND"
>brctl delbr <TT
CLASS="USERINPUT"
><B
>bridgename</B
></TT
></B
>
              will only work, if there are no more interfaces added to the
              instance you want to delete.
            </P
></TD
></TR
></TABLE
></DIV
>
        </P
></DD
><DT
><A
HREF="#BRCTL-ADDIF"
><IMG
SRC="../images/callouts/2.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(2)"></A
><A
HREF="#BRCTL-DELIF"
><IMG
SRC="../images/callouts/4.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(4)"></A
></DT
><DD
>The
          <B
CLASS="COMMAND"
>brctl addif <TT
CLASS="USERINPUT"
><B
>bridgename</B
></TT
>
          <TT
CLASS="USERINPUT"
><B
>device</B
></TT
></B
>
          command enslaves the network device <TT
CLASS="USERINPUT"
><B
>device</B
></TT
>
          to take part in the bridging of <TT
CLASS="USERINPUT"
><B
>bridgename</B
></TT
>.
          As a simple explanation, each interface enslaved into a instance
          is bridged to the other interfaces of the instance.
        </DD
><DD
><P
>The corresponding command to tale a interface out of the bridge
           would be
           <B
CLASS="COMMAND"
>brctl delif <TT
CLASS="USERINPUT"
><B
>bridgename</B
></TT
>
           <TT
CLASS="USERINPUT"
><B
>device</B
></TT
></B
>
        </P
></DD
><DT
><A
HREF="#BRCTL-SHOW"
><IMG
SRC="../images/callouts/5.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(5)"></A
></DT
><DD
>The <B
CLASS="COMMAND"
>brctl show</B
> command gives you a summary
          about the overall bridge status, and the instances running as
          shown in <A
HREF="#BRCTL-SHOW-OUTPUT"
>Example 7</A
>.
          If you are interested in detailed information about a instance and
          it's interfaces you will have to check <A
HREF="#BRCTL-SHOWBR"
><A
HREF="#BRCTL-SHOWBR"
><IMG
SRC="../images/callouts/6.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(6)"></A
></A
>.
        </DD
><DIV
CLASS="EXAMPLE"
><A
NAME="BRCTL-SHOW-OUTPUT"
></A
><P
><B
>Example 7. Output Of <B
CLASS="COMMAND"
>brctl show</B
></B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:~ # brctl show
bridge name     bridge id               stp enabled
mybridge1       0000.0800062815f6       yes
          </PRE
></TD
></TR
></TABLE
></DIV
><DT
><A
HREF="#BRCTL-SHOWBR"
><IMG
SRC="../images/callouts/6.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(6)"></A
></DT
><DD
>The <B
CLASS="COMMAND"
>brctl showbr <TT
CLASS="USERINPUT"
><B
>bridgename</B
></TT
></B
>
          command gives you a summary about a bridge instance and it's enslaved
          interfaces.
        </DD
><DIV
CLASS="EXAMPLE"
><A
NAME="BRCTL-SHOWBR-OUTPUT"
></A
><P
><B
>Example 8. Output Of <B
CLASS="COMMAND"
>brctl showbr <TT
CLASS="USERINPUT"
><B
>bridgename</B
></TT
></B
></B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:~ # brctl showbr mybridge1
mybridge1
 bridge id              0000.0800062815f6
 designated root        0000.0800062815f6
 root port                 0                    path cost                  0
 max age                   4.00                 bridge max age             4.00
 hello time                1.00                 bridge hello time          1.00
 forward delay             4.00                 bridge forward delay       4.00
 ageing time             300.00                 gc interval                4.00
 hello timer               0.84                 tcn timer                  0.00
 topology change timer     0.00                 gc timer                   1.84
 flags


eth0 (1)
 port id                8001                    state                   forwarding
 designated root        0000.0800062815f6       path cost                100
 designated bridge      0000.0800062815f6       message age timer          0.00
 designated port        8001                    forward delay timer        0.00
 designated cost           0                    hold timer                 0.84
 flags

eth1 (2)
 port id                8002                    state                   forwarding
 designated root        0000.0800062815f6       path cost                100
 designated bridge      0000.0800062815f6       message age timer          0.00
 designated port        8002                    forward delay timer        0.00
 designated cost           0                    hold timer                 0.84
 flags
          </PRE
></TD
></TR
></TABLE
></DIV
><DT
><A
HREF="#BRCTL-SHOWMACS"
><IMG
SRC="../images/callouts/7.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(7)"></A
></DT
><DD
>The <B
CLASS="COMMAND"
>brctl showmacs <TT
CLASS="USERINPUT"
><B
>bridgename</B
></TT
></B
>
          command gives you a list of <SPAN
CLASS="ACRONYM"
>MAC</SPAN
>-addresses of the
          interfaces which are enslaved in <TT
CLASS="USERINPUT"
><B
>bridgename</B
></TT
>.
        </DD
><DIV
CLASS="EXAMPLE"
><A
NAME="BRCTL-SHOWMACS-OUTPUT"
></A
><P
><B
>Example 9. Output Of <B
CLASS="COMMAND"
>brctl showmacs <TT
CLASS="USERINPUT"
><B
>bridgename</B
></TT
></B
></B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:~ # brctl showmacs mybridge1
port no mac addr                is local?       ageing timer
  1     00:10:4b:b6:c6:e4       no               119.25
  1     00:50:04:43:82:85       no                 0.00
  1     00:50:da:45:45:b1       no                76.75
  1     00:a0:24:d0:4c:d6       yes                0.00
  1     00:a0:24:f0:22:71       no                 5.81
  1     08:00:09:b5:dc:41       no                22.22
  1     08:00:09:fb:39:a1       no                27.24
  1     08:00:09:fc:92:2c       no                53.13
  4     08:00:09:fc:d2:11       yes                0.00
  1     08:00:09:fd:23:88       no               230.42
  1     08:00:09:fe:0d:6f       no               144.55
          </PRE
></TD
></TR
></TABLE
></DIV
><DT
><A
HREF="#BRCTL-SETAGEING"
><IMG
SRC="../images/callouts/8.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(8)"></A
></DT
><DD
>Sets the aging time.
          The aging time is the number of seconds a <SPAN
CLASS="ACRONYM"
>MAC</SPAN
>-address will be
          kept in the forwarding database after having received a packet
          from this <SPAN
CLASS="ACRONYM"
>MAC</SPAN
> address.
          The entries in the forwarding database are periodically timed out
          to ensure they won't stay around forever.
          Normally there should be no need to modify this parameter.
        </DD
><DT
><A
HREF="#BRCTL-SETBRIDGEPRIO"
><IMG
SRC="../images/callouts/9.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(9)"></A
></DT
><DD
>Sets the bridge's relative priority.
          The bridge with the lowest priority will be elected as the root
          bridge.
          The root bridge is the <SPAN
CLASS="QUOTE"
>"central"</SPAN
> bridge in the
          spanning tree.
          More information about <SPAN
CLASS="ACRONYM"
>STP</SPAN
> you find at
          <A
HREF="#STP"
>Section 7.1</A
>.
        </DD
><DT
><A
HREF="#BRCTL-SETFD"
><IMG
SRC="../images/callouts/10.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(10)"></A
></DT
><DD
>Sets the forwarding delay time.
          The forwarding delay time is the time spent in each of the
          Listening and Learning states before the Forwarding state is
          entered.
        </DD
><DT
><A
HREF="#BRCTL-SETGCINT"
><B
>(11)</B
></A
></DT
><DD
>Sets the garbage collection interval.
          Every (this number) seconds, the entire forwarding database is
          checked for timed-out entries.
          The timed-out entries are removed.
        </DD
><DT
><A
HREF="#BRCTL-SETHELLO"
><B
>(12)</B
></A
></DT
><DD
>Sets the hello time.
          Every (this number) seconds, a hello packet is sent out by the Root
          Bridge and the Designated Bridges.
          Hello packets are used to communicate information about the topology
          throughout the entire Bridged Local Area Network.
          More information about <SPAN
CLASS="ACRONYM"
>STP</SPAN
> you find at
          <A
HREF="#STP"
>Section 7.1</A
>.
        </DD
><DT
><A
HREF="#BRCTL-SETMAXAGE"
><B
>(13)</B
></A
></DT
><DD
>Sets the maximum message age.
          If the last seen (received) hello packet is more than this number
          of seconds old, the bridge in question will start the takeover
          procedure in attempt to become the Root Bridge itself.
          More information about <SPAN
CLASS="ACRONYM"
>STP</SPAN
> you find at
          <A
HREF="#STP"
>Section 7.1</A
>.
        </DD
><DT
><A
HREF="#BRCTL-SETPATHCOST"
><B
>(14)</B
></A
></DT
><DD
>Sets the cost of receiving (or sending, I'm not sure) a packet
          on this interface.
          Faster interfaces should have lower path costs.
          These values are used in the computation of the minimal spanning
          tree.
          More information about <SPAN
CLASS="ACRONYM"
>STP</SPAN
> you find at
          <A
HREF="#STP"
>Section 7.1</A
>.
          Paths with lower costs are likelier to be used in the spanning tree
          than high-cost paths
          (As an example, think of a gigabit line with a 100Mbit or 10Mbit
          line as a backup line.
          You don't want the 10/100Mbit line to become the primary line there.)
        </DD
><DD
><P
>          The Linux implementation currently sets the path cost of all eth*
          interfaces to 100, the nominal cost for a 10Mbit connection. There is
          unfortunately no easy way to discern 10Mbit from 100Mbit from 1Gbit
          Ethernet cards, so the bridge cannot use the real interface speed.
        </P
></DD
><DT
><A
HREF="#BRCTL-STP"
><B
>(16)</B
></A
></DT
><DD
>With this parameter you can enable or disable the Spanning Tree
          Protocol.
        </DD
><DT
><A
HREF="#BRCTL-SETBRIDGEPRIO"
><IMG
SRC="../images/callouts/9.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(9)"></A
><A
HREF="#BRCTL-SETHELLO"
><B
>(12)</B
></A
><A
HREF="#BRCTL-SETPATHCOST"
><B
>(14)</B
></A
><A
HREF="#BRCTL-STP"
><B
>(16)</B
></A
></DT
><DD
>This parameters are only of interest, if you have more than
          one bridge in your LAN and stp enabled.
          Before modifying them you should read
          <A
HREF="#STP"
>Section 7.1</A
>.
        </DD
></DL
></DIV
></DIV
><DIV
CLASS="SECT2"
><HR><H2
CLASS="SECT2"
><A
NAME="BASIC-SETUP"
>6.2. Basic Setup</A
></H2
><P
>The standard configuration should consist of:
    </P
><P
></P
><OL
COMPACT="COMPACT"
TYPE="1"
><LI
><P
>Create the bridge interface.
          <TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="90%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:~ # brctl addbr mybridge
          </PRE
></TD
></TR
></TABLE
>
        </P
></LI
><LI
><P
>Add interfaces to the bridge.
          <TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="90%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:~ # brctl addif mybridge eth0
root@mbb-1:~ # brctl addif mybridge eth1
          </PRE
></TD
></TR
></TABLE
>
        </P
></LI
><LI
><P
>Zero IP the interfaces.
          <TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="90%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:~ # ifconfig eth0 0.0.0.0
root@mbb-1:~ # ifconfig eth1 0.0.0.0
          </PRE
></TD
></TR
></TABLE
>
        </P
></LI
><LI
><P
>Put up the bridge.
          <TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="90%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:~ # ifconfig mybridge up
          </PRE
></TD
></TR
></TABLE
>
        </P
></LI
><LI
><P
>Optionally you can configure the virtual interface
          <TT
CLASS="USERINPUT"
><B
>mybridge</B
></TT
> to take part in your network.
          It behaves like one interface (like a normal network card).
          Exactly that way you configure it, replacing the previous
          command with something like:
          <TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="90%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:~ # ifconfig mybridge 192.168.100.5 netmask 255.255.255.0 up
          </PRE
></TD
></TR
></TABLE
>
        </P
></LI
></OL
><P
>A more sophisticated setup script you will find at
      <A
HREF="#BRIDGE-INIT-SCRIPT"
>Example 16</A
>.
    </P
><DIV
CLASS="IMPORTANT"
><BLOCKQUOTE
CLASS="IMPORTANT"
><P
><B
>Important: </B
>If you get the terrible experience of a frozen system or
        some nasty behavior of your nicely shaped linux box at
        <TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:~ # ifconfig eth<TT
CLASS="USERINPUT"
><B
>n</B
></TT
> 0 0.0.0.0
        </PRE
></TD
></TR
></TABLE
>
        please try (after the reboot of the system if necessary)
        before starting any bridge stuff at all a
        <TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:~ # ifconfig eth<TT
CLASS="USERINPUT"
><B
>n</B
></TT
> promisc up
        </PRE
></TD
></TR
></TABLE
>
        If again your system is frozen it's you NIC's driver you have to blame,
        not the bridging code.
      </P
></BLOCKQUOTE
></DIV
></DIV
></DIV
><DIV
CLASS="SECT1"
><HR><H1
CLASS="SECT1"
><A
NAME="ADVANCED-BRIDGE"
>7. Advanced Bridge Features</A
></H1
><P
>Here we will cover some advanced features of the new bridge code.
  </P
><DIV
CLASS="SECT2"
><HR><H2
CLASS="SECT2"
><A
NAME="STP"
>7.1. Spanning Tree Protocol</A
></H2
><DIV
CLASS="FORMALPARA"
><P
><B
>Tell me... </B
>          <P
></P
><UL
><LI
><P
>You are a networkadmin...?
              </P
></LI
><LI
><P
>You have a switch on top of your ethernet tree...?
              </P
></LI
><LI
><P
>You have nightmares of a switch emmiting smoke...?
              </P
></LI
><LI
><P
>Your company is not extremely rich and con provide
              another redundant switch just waiting for you to plug the
              patchwires..?
              </P
></LI
><LI
><P
>You don't feel like placing your bed close to your
              main network node to plug the wires...?
              </P
></LI
></UL
>
      </P
></DIV
><DIV
CLASS="FORMALPARA"
><P
><B
>Don't wait until you're just another nervous wreck. </B
>Join linux bridge community and enjoy the relaxment a
        stp-enabled inhouse scenario is offering to you.
      </P
></DIV
><P
>Ok, let's leave that commercial and get back linux and the bridge.
      Take a look on this small thread from the linux-bridge mailing list.
    </P
><DIV
CLASS="QANDASET"
><H3
CLASS="TITLE"
>STP Thread from bridge@openrock.net (no more valid)</H3
><DL
><DT
> <A
HREF="#AEN487"
>Could you give me some hints about multi-bridge scenarios.
          </A
></DT
><DT
> <A
HREF="#AEN506"
>Does the <SPAN
CLASS="ACRONYM"
>STP</SPAN
> <SPAN
CLASS="QUOTE"
>"heartbeat"</SPAN
> mechanism also work
            with bridges with more than two cards?
          </A
></DT
><DT
> <A
HREF="#AEN515"
>How fast does it get up, and what can I do about it?
          </A
></DT
></DL
><DIV
CLASS="QANDAENTRY"
><DIV
CLASS="QUESTION"
><P
><A
NAME="AEN487"
></A
><B
> </B
>Could you give me some hints about multi-bridge scenarios.
          </P
></DIV
><DIV
CLASS="ANSWER"
><P
><B
> </B
>You can just set up two <SPAN
CLASS="QUOTE"
>"mirrored"</SPAN
> bridges.
            You have two network interfaces in your bridge?
            Set up the mirror bridge so that it has two network interfaces
            as well, and connect each of the interfaces to one subnet.
            This will work without the need of configuration.
          </P
><P
>            <DIV
CLASS="NOTE"
><BLOCKQUOTE
CLASS="NOTE"
><P
><B
>Note: </B
>Be sure that you have the spanning tree protocol
                enabled.
                If you didn't use <B
CLASS="COMMAND"
>brctl</B
>, this should
                be fine, because in Linux, it is on by default.
                To check, you could check whether the bridge sends a
                packet to <TT
CLASS="COMPUTEROUTPUT"
>0180c2000000</TT
>
                every 2 seconds.
                If it does, the <SPAN
CLASS="ACRONYM"
>STP</SPAN
> is on.
                The <SPAN
CLASS="ACRONYM"
>STP</SPAN
> is needed so that only one bridge will be active
                at any given time.
              </P
></BLOCKQUOTE
></DIV
>

            <DIV
CLASS="NOTE"
><BLOCKQUOTE
CLASS="NOTE"
><P
><B
>Note: </B
>To be able to see nicely formatted stp packages in your
                network take a look at at the bridge homepage for the patches
                to tcpdump.
              </P
></BLOCKQUOTE
></DIV
>
          </P
><P
>            The <SPAN
CLASS="QUOTE"
>"master"</SPAN
> bridge will send out <SPAN
CLASS="ACRONYM"
>STP</SPAN
> packets every
            2 seconds by default.
            The <SPAN
CLASS="QUOTE"
>"slave"</SPAN
> bridge will receive these packets,
            and will notice that the master is still up.
            If the slave hasn't received a packet in 20 seconds (max.
            message age parameter), it will start the takeover procedure.
            From the moment the takeover procedure starts, it will take
            about 30 seconds (twice the forward delay parameter) for the
            bridge to become fully operational.
          </P
></DIV
></DIV
><DIV
CLASS="QANDAENTRY"
><DIV
CLASS="QUESTION"
><P
><A
NAME="AEN506"
></A
><B
> </B
>Does the <SPAN
CLASS="ACRONYM"
>STP</SPAN
> <SPAN
CLASS="QUOTE"
>"heartbeat"</SPAN
> mechanism also work
            with bridges with more than two cards?
          </P
></DIV
><DIV
CLASS="ANSWER"
><P
><B
> </B
>Yes, it works with any number of interfaces.
            You can invent bizarre topologies to your heart's desire.
            You can use multiple (redundant) bridge-bridge connects,
            you can insert loops, whatever.
            The <SPAN
CLASS="ACRONYM"
>STP</SPAN
> code will always find the minimal spanning tree.
            The bridge code will even deal with the loss of any number
            of interfaces.
            If there are two redundant bridges with identical connections,
            the loss of an interface on one of the bridges will cause the
            other bridge to take over forwarding to that specific
            interface.
            <EM
>Now isn't that great? :)</EM
>
          </P
></DIV
></DIV
><DIV
CLASS="QANDAENTRY"
><DIV
CLASS="QUESTION"
><P
><A
NAME="AEN515"
></A
><B
> </B
>How fast does it get up, and what can I do about it?
          </P
></DIV
><DIV
CLASS="ANSWER"
><P
><B
> </B
>If you think 50 seconds is too much -- and I guess you
  	  should; alas, the IEEE specs gives us these default values
  	  -- you can tweak these parameters.
            If you set the hello time (the <SPAN
CLASS="ACRONYM"
>STP</SPAN
> packet interval) from 2 to 1
  	  second, you can safely set the message age parameter to 4
  	  seconds.
            Then you can set the forward delay to 4 seconds, and this will
            in total give you a takeover time of ~12 seconds.
          </P
></DIV
></DIV
></DIV
><P
>The great thing which is made possible by <SPAN
CLASS="ACRONYM"
>STP</SPAN
> is
      a redundant parallel bridging scenario, with automated take over
      features.

      Within a network basing on stp the bridges always try to send a
      datagram the (by path cost) shortest path.
      Only on that path the bridges are forwarding, all other paths between
      this shortest way are blocked.

      If there is a broken path, the bridges agree about the next shortest.
      So doubled paths don't break the net, but are bringing more security...

      For a example setup of a fail secured connection see
      <A
HREF="#PRACTICAL-EXAMPLE"
>Section 8</A
>.
    </P
></DIV
><DIV
CLASS="SECT2"
><HR><H2
CLASS="SECT2"
><A
NAME="IPCHAINS"
>7.2. Bridge And The IP-Chains</A
></H2
><P
>The normal idea about a bridge would not allow anything like
      firewalling, but since several people have asked Lennert for ipchains
      firewalling on bridge forwarding he implemented it.
    </P
><DIV
CLASS="IMPORTANT"
><BLOCKQUOTE
CLASS="IMPORTANT"
><P
><B
>Important: </B
>If you want to do this, you will need to apply the
        special ip-chain-bridge-patch (also available at
        <A
HREF="http://www.math.leidenuniv.nl/~buytenh/bridge/"
TARGET="_top"
>the bridge homepage</A
>).
      </P
></BLOCKQUOTE
></DIV
><P
>As soon you have everything up correctly, the bridging code will
      check each to-be-forwarded packet against the ipchains chain which has
      the same name as the bridge.
    </P
><P
>So.. if a packet on eth0 is to be forwarded to eth1, and those
      interfaces are both part of the bridge group br0, the
      bridging code will check the packet against the chain called 'br0'.
    </P
><DIV
CLASS="WARNING"
><P
></P
><TABLE
CLASS="WARNING"
BORDER="1"
WIDTH="100%"
><TR
><TD
ALIGN="CENTER"
><B
>Warning</B
></TD
></TR
><TR
><TD
ALIGN="LEFT"
><P
>If the chain does not exist, the packet will be forwarded.
        So if you want to do firewalling, you'll have to create the chain
        yourself.
      </P
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="SIMPLE-FW-CONFIG"
></A
><P
><B
>Example 10. A Simple Bridge Firewall Setup</B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>Example:
# brctl addbr <TT
CLASS="USERINPUT"
><B
>br0</B
></TT
>                                   <A
NAME="IPCH-ADDBR"
><IMG
SRC="../images/callouts/1.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(1)"></A
>
# brctl addif br0 eth0                              <A
NAME="IPCH-ADDIF-ETH0"
><IMG
SRC="../images/callouts/2.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(2)"></A
>
# brctl addif br0 eth1                              <A
NAME="IPCH-ADDIF-ETH1"
><IMG
SRC="../images/callouts/3.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(3)"></A
>
# ifconfig br0 10.0.0.254                           <A
NAME="IPCH-IFCONFIG"
><IMG
SRC="../images/callouts/4.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(4)"></A
>
# ipchains -N <TT
CLASS="USERINPUT"
><B
>br0</B
></TT
>                                   <A
NAME="IPCH-ADDCHAIN"
><IMG
SRC="../images/callouts/5.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(5)"></A
>
# ipchains -A br0 -s 10.0.0.1/8 -i eth0 -j DENY     <A
NAME="IPCH-DEN-ETH0"
><IMG
SRC="../images/callouts/6.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(6)"></A
>
      </PRE
></TD
></TR
></TABLE
><DIV
CLASS="CALLOUTLIST"
><DL
COMPACT="COMPACT"
><DT
><A
HREF="#IPCH-ADDBR"
><IMG
SRC="../images/callouts/1.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(1)"></A
></DT
><DD
>Creating a bridge interface named <TT
CLASS="USERINPUT"
><B
>br0</B
></TT
>
          </DD
><DT
><A
HREF="#IPCH-ADDIF-ETH0"
><IMG
SRC="../images/callouts/2.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(2)"></A
><A
HREF="#IPCH-ADDIF-ETH1"
><IMG
SRC="../images/callouts/3.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(3)"></A
></DT
><DD
>Placing eth0 and eth1 into the bridge.
          </DD
><DT
><A
HREF="#IPCH-IFCONFIG"
><IMG
SRC="../images/callouts/4.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(4)"></A
></DT
><DD
>Assigning a regular IP address to the bridge.
            The IP is taken from private network 10.X.X.X (Class A).
          </DD
><DT
><A
HREF="#IPCH-ADDCHAIN"
><IMG
SRC="../images/callouts/5.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(5)"></A
></DT
><DD
>Creating a ip-chain named <TT
CLASS="USERINPUT"
><B
>br0</B
></TT
>
          </DD
><DT
><A
HREF="#IPCH-ADDBR"
><IMG
SRC="../images/callouts/1.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(1)"></A
><A
HREF="#IPCH-ADDCHAIN"
><IMG
SRC="../images/callouts/5.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(5)"></A
></DT
><DD
>            <DIV
CLASS="CAUTION"
><P
></P
><TABLE
CLASS="CAUTION"
BORDER="1"
WIDTH="100%"
><TR
><TD
ALIGN="CENTER"
><B
>Caution</B
></TD
></TR
><TR
><TD
ALIGN="LEFT"
><P
>It's vital to have the same name here
                (<TT
CLASS="USERINPUT"
><B
>br0</B
></TT
> or whatever you have selected,
                as long as you have the same in all places).
              </P
></TD
></TR
></TABLE
></DIV
>
          </DD
><DT
><A
HREF="#IPCH-DEN-ETH0"
><IMG
SRC="../images/callouts/6.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(6)"></A
></DT
><DD
>Denying all trafic with source 10.X.X.X on eth0.
          </DD
></DL
></DIV
></DIV
></DIV
></DIV
><DIV
CLASS="SECT1"
><HR><H1
CLASS="SECT1"
><A
NAME="PRACTICAL-EXAMPLE"
>8. A Practical Setup Example</A
></H1
><BLOCKQUOTE
CLASS="ABSTRACT"
><DIV
CLASS="ABSTRACT"
><A
NAME="AEN564"
></A
><P
></P
><P
>This is a real-world example which is currently working
       in our network.
       Even if it's for sure not a very common situation it might be
       useful.
     </P
><P
></P
></DIV
></BLOCKQUOTE
><P
>I had to solve a small hardware incompatibility.
    HP-VG (Voice Grade) 100Mbit network is not fast Ethernet
    compatible.
    Having neither the money nor the will to replace the
    stuff and having the need to expand the system I had to find a
    solution which was a) stable and b) cheap.
  </P
><P
>For sure buying a HP modular switch was not meeting condition
    b).
    So I remembered I heard about Linux-bridging which automatically
    fulfilled condition a) and b).
  </P
><P
>So quite some time ago I successfully set up a bridge
    between the two incompatible networks.
    Its first hardware-layout is shown in
    <A
HREF="#OLD-BRIDGE-HARDWARE-SETUP"
>Figure 1</A
>.
  </P
><DIV
CLASS="FIGURE"
><A
NAME="OLD-BRIDGE-HARDWARE-SETUP"
></A
><P
><B
>Figure 1. Hardware setup Of The Old Bridge Scenario</B
></P
><DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="old-hardware-setup.png"
></IMG
><DIV
CLASS="CAPTION"
><P
>The old setup of my previous linux bridge
        </P
></DIV
></P
></DIV
></DIV
><P
>It was configured as a transparent network component,
    meaning it didn't take a part in the network, but only bridged
    it.
    Originally it was set up on kernel 2.0.35 from a SuSE 5.3 distribution.
  </P
><P
>The next problem showed up at once. A single bridge
    connecting the big segments might be c) a bottleneck and
    d) a reason to kill the netadmin, if it blows up.
    So I tried to find some solution for that problem.
  </P
><P
>What happened next was that I discovered some hints that a
    new maintainer took over the bridging code.
    A few mails on the bridge-mailing list later as shown in
    <A
HREF="#STP"
>Section 7.1</A
> I was more clever.
    The new modular bridging code fulfilled exactly what I was looking
    for.
  </P
><DIV
CLASS="FORMALPARA"
><P
><B
>The new maintainer: Lennert Buytenhek
    . </B
>His project page can be found at
      <A
HREF="http://www.math.leidenuniv.nl/~buytenh/bridge/"
TARGET="_top"
>http://www.math.leidenuniv.nl/~buytenh/bridge/</A
>
      IMHO he's doing a great job. Thanks a lot.
    </P
></DIV
><DIV
CLASS="SECT2"
><HR><H2
CLASS="SECT2"
><A
NAME="AEN590"
>8.1. Hardware-setup</A
></H2
><P
>The ideas and hints I got from the mailing list discussion shown in
      <A
HREF="#STP"
>Section 7.1</A
> lead to a new hardware-setup shown in
      <A
HREF="#MULTI-BRIDGE-HARDWARE-SETUP"
>Figure 2</A
>.
      The setup is intended to provide a default machine
      (guess which one).
      The bridge has 3 HP cards of which each is connected to a HP VG15 hub.
      The 3com card is connected to a 3com Superstack Fast Ethernet switch.
    </P
><DIV
CLASS="FIGURE"
><A
NAME="MULTI-BRIDGE-HARDWARE-SETUP"
></A
><P
><B
>Figure 2. Hardware Setup Of The Multi bridge Scenario</B
></P
><DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="hardware-setup.png"
></IMG
><DIV
CLASS="CAPTION"
><P
>The practically working setup of my local linux Ethernet multi bridge
          </P
></DIV
></P
></DIV
></DIV
><P
>This setup is not only fail proof to any one of the bridge's
      interfaces being down, but also to complete blackout of one of the
      bridges.
      Additional advantage to the old-setup
      <A
HREF="#OLD-BRIDGE-HARDWARE-SETUP"
>Figure 1</A
> that the single HUBS are
      switched.
      This means that a datagram being sent from one port on the VG15 HUB
      blocks 30 ports by maximum and 15 ports by minimum, instead of
      blocking all 45 ports.
      Also, the breakdown of the HUB, to the old bridge was connected, would
      have caused the whole HP-segment to break down.
      With the new code only the machines connected to the broken HUB will
      get no more data.
    </P
></DIV
><DIV
CLASS="SECT2"
><HR><H2
CLASS="SECT2"
><A
NAME="AEN609"
>8.2. Software-setup</A
></H2
><P
>For both bridges the setup is exactly the same (with the
      exception of bridge priority which will be discussed later on).
      The machine was setup by the SuSE 6.4 distribution with the original
      unpatched kernel sources installed.
      At this point only the minimal configuration and no additional
      hardware or network setup.
    </P
><P
>The basic setup is according the descriptions in the beginning of
      this document.
      The thing I did in addition was bringing up the unpatched 2.2.14
      sources of the SuSE 6.4 distribution to version 2.2.15 as in	
      <A
HREF="#APPLY-KERNEL-PATCH"
>Example 11</A
>.
    </P
><DIV
CLASS="EXAMPLE"
><A
NAME="APPLY-KERNEL-PATCH"
></A
><P
><B
>Example 11. Upgrading The Kernel From 2.2.14 To 2.2.15</B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:~ # cd /usr/src/linux-2.2.14
root@mbb-1:/usr/src/linux-2.2.14 # patch -p1 \
    <TT
CLASS="USERINPUT"
><B
>/usr/local/download/kernel/patch-2.2.15</B
></TT
>
patching file ........................
patching file ...................
...
..
root@mbb-1:/usr/src/linux-2.2.14 # cd ..
root@mbb-1:/usr/src # mv linux-2.2.14 linux-2.2.15
root@mbb-1:/usr/src # rm linux
root@mbb-1:/usr/src # ln -s linux-2.2.15 linux
      </PRE
></TD
></TR
></TABLE
></DIV
><P
>Next step was to apply the bridge-patch as shown in
      <A
HREF="#APPLY-BRIDGE-PATCH"
>Example 12</A
>.
    </P
><DIV
CLASS="EXAMPLE"
><A
NAME="APPLY-BRIDGE-PATCH"
></A
><P
><B
>Example 12. Applying The Kernel Patch</B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:/usr/src # cd /usr/src/linux-2.2.15
root@mbb-1:/usr/src/linux-2.2.15 # patch -p1 &#60; \
    <TT
CLASS="USERINPUT"
><B
>bridge-0.0.5-against-2.2.15.diff</B
></TT
>
patching file ........................
patching file ...................
...
..
      </PRE
></TD
></TR
></TABLE
></DIV
><P
>After that I selected the bridging code to be compiled as a
      module as shown in
      <A
HREF="#MENUCONFIG-BRIDGE-MODULE-SELECTION"
>Example 13</A
>.
    </P
><DIV
CLASS="EXAMPLE"
><A
NAME="MENUCONFIG-BRIDGE-MODULE-SELECTION"
></A
><P
><B
>Example 13. Configuring The Kernel</B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:/usr/src/linux-2.2.15 # make config

..

*
* Code maturity level options
*
Prompt for development and/or incomplete code/drivers (CONFIG_EXPERIMENTAL)
[N/y/?] Y

..


802.1d Ethernet Bridging (CONFIG_BRIDGE) [N/y/m/?] (NEW) m

..
      </PRE
></TD
></TR
></TABLE
></DIV
><P
>By the way I also selected the drivers of my NIC's to be compiled
      as modules which resulted to <TT
CLASS="FILENAME"
>3c95x.o</TT
> and
      <TT
CLASS="FILENAME"
>hp100.o</TT
>.
    </P
><DIV
CLASS="INFORMALEXAMPLE"
><A
NAME="AEN632"
></A
><P
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>root@mbb-1:/usr/src/linux-2.2.15 # make dep clean zImage \
  modules modules_install zlilo

..

root@mbb-1:/usr/src/linux-2.2.15 # init 6
      </PRE
></TD
></TR
></TABLE
><P
></P
></DIV
><P
>After the reboot happening I started at runlevel 1 leaving all the
      networking out of the running system.
      That gave me the chance to check the setup step by step.
    </P
><P
>The command <B
CLASS="COMMAND"
>modprobe -v bridge</B
> worked
      without any warnings, so that one was OK.
      Next I edited my <TT
CLASS="FILENAME"
>/etc/modules.conf</TT
> by aliasing
      my network card drivers as shown in
      <A
HREF="#MODULES-CONF-NIC-SAMPLE-MBB1"
>Example 14</A
> and
      <A
HREF="#MODULES-CONF-NIC-SAMPLE-MBB2"
>Example 15</A
>.
      I didn't need to make use of the options, all cards where realized
      proper as I checked by <B
CLASS="COMMAND"
>cat /proc/modules</B
>,
      <B
CLASS="COMMAND"
>cat /proc/interrupts</B
> and
      <B
CLASS="COMMAND"
>cat /proc/ioports</B
>.
    </P
><DIV
CLASS="EXAMPLE"
><A
NAME="MODULES-CONF-NIC-SAMPLE-MBB1"
></A
><P
><B
>Example 14. <TT
CLASS="FILENAME"
>/etc/modules.conf</TT
> of <EM
>mbb-1</EM
></B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
># Aliases - specify your hardware
alias eth0             3c59x
alias eth1             hp100
alias eth2             hp100
alias eth3             hp100
      </PRE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="MODULES-CONF-NIC-SAMPLE-MBB2"
></A
><P
><B
>Example 15. <TT
CLASS="FILENAME"
>/etc/modules.conf</TT
> of <EM
>mbb-2</EM
></B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
># Aliases - specify your hardware
alias eth0             3c509
alias eth1             hp100
alias eth2             hp100
alias eth3             hp100
      </PRE
></TD
></TR
></TABLE
></DIV
><P
>So next thing would have been a step by step setup of the bridge
      and it's interfaces.
      Because I'm lazy I just show the init script I prepared for the
      setup.	

      <DIV
CLASS="IMPORTANT"
><BLOCKQUOTE
CLASS="IMPORTANT"
><P
><B
>Important: </B
>Of course you'll have do adapt the script to your system,
          if you want to use it.
          Please remember I'm writing this for the setup of a SuSE
          distribution.
        </P
></BLOCKQUOTE
></DIV
>
    </P
><DIV
CLASS="EXAMPLE"
><A
NAME="BRIDGE-INIT-SCRIPT"
></A
><P
><B
>Example 16. Bridge Init Script</B
></P
><P
>        <TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="PROGRAMLISTING"
>#! /bin/bash
# Copyright (c) 2000 Uwe Böhme.  All rights reserved.
#
# Author: Uwe Böhme &#60;uwe@bnhof.de&#62;, 2000
#
#
# /sbin/init.d/bridge
#

. /etc/rc.config

return=$rc_done
case "$1" in

    start)
        echo "Starting service bridge mueb"
        brctl addbr mueb  ||  return=$rc_failed                             <A
NAME="CREATE-BRIDGE"
><IMG
SRC="../images/callouts/1.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(1)"></A
>
        brctl setbridgeprio mueb 0 || return=$rc_failed                     <A
NAME="SET-ROOT-BRIDGE"
><IMG
SRC="../images/callouts/2.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(2)"></A
>
        brctl addif mueb eth0  ||  return=$rc_failed                        <A
NAME="ADDIF-ETH0"
><IMG
SRC="../images/callouts/3.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(3)"></A
>
        brctl addif mueb eth1  ||  return=$rc_failed                        <A
NAME="ADDIF-ETH1"
><IMG
SRC="../images/callouts/4.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(4)"></A
>
        brctl addif mueb eth2  ||  return=$rc_failed                        <A
NAME="ADDIF-ETH2"
><IMG
SRC="../images/callouts/5.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(5)"></A
>
        brctl addif mueb eth3  ||  return=$rc_failed                        <A
NAME="ADDIF-ETH3"
><IMG
SRC="../images/callouts/6.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(6)"></A
>
        ifconfig eth0 0.0.0.0  ||  return=$rc_failed                        <A
NAME="UP-ETH0"
><IMG
SRC="../images/callouts/7.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(7)"></A
>
        ifconfig eth1 0.0.0.0  ||  return=$rc_failed                        <A
NAME="UP-ETH1"
><IMG
SRC="../images/callouts/8.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(8)"></A
>
        ifconfig eth2 0.0.0.0  ||  return=$rc_failed                        <A
NAME="UP-ETH2"
><IMG
SRC="../images/callouts/9.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(9)"></A
>
        ifconfig eth3 0.0.0.0  ||  return=$rc_failed                        <A
NAME="UP-ETH3"
><IMG
SRC="../images/callouts/10.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(10)"></A
>
        brctl sethello mueb 1  ||  return=$rc_failed                        <A
NAME="HELLO-1"
><B
>(11)</B
></A
>
        brctl setmaxage mueb 4  ||  return=$rc_failed                       <A
NAME="MAXAGE-4"
><B
>(12)</B
></A
>
        brctl setfd mueb 4  ||  return=$rc_failed                           <A
NAME="FORWARDDELAY-4"
><B
>(13)</B
></A
>

        echo -e "$return"
        ;;

    stop)
        echo "Shutting down service bridge mueb"
        brctl delif mueb eth3  ||  return=$rc_failed                        <A
NAME="DELIF-ETH3"
><B
>(14)</B
></A
>
        brctl delif mueb eth2  ||  return=$rc_failed                        <A
NAME="DELIF-ETH2"
><B
>(15)</B
></A
>
        brctl delif mueb eth1  ||  return=$rc_failed                        <A
NAME="DELIF-ETH1"
><B
>(16)</B
></A
>
        brctl delif mueb eth0  ||  return=$rc_failed                        <A
NAME="DELIF-ETH0"
><B
>(17)</B
></A
>
        brctl delbr mueb  ||  return=$rc_failed                             <A
NAME="DESTROY-BRIDGE"
><B
>(18)</B
></A
>
        rmmod bridge || return=$rc_failed                                   <A
NAME="REMOVE-MODULE"
><B
>(19)</B
></A
>

        echo -e "$return"
        ;;

    status)
        ifconfig mueb
        brctl showbr mueb
	;;

    restart)
        $0 stop &#38;&#38; $0 start || return=$rc_failed
        ;;

    *)
        echo "Usage: $0 {start|stop|status|restart}"
        exit 1
esac

test "$return" = "$rc_done" || exit 1
exit 0
        </PRE
></TD
></TR
></TABLE
>
      </P
></DIV
><DIV
CLASS="CALLOUTLIST"
><DL
COMPACT="COMPACT"
><DT
><A
HREF="#CREATE-BRIDGE"
><IMG
SRC="../images/callouts/1.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(1)"></A
></DT
><DD
>This command creates a new virtual interface (bridge instance)
          with the name <TT
CLASS="USERINPUT"
><B
>mueb</B
></TT
> and also brings up the
          bridge module.
          <DIV
CLASS="NOTE"
><BLOCKQUOTE
CLASS="NOTE"
><P
><B
>Note: </B
>At least my system it does.
              Maybe you have to enable the kernel module loader.
            </P
></BLOCKQUOTE
></DIV
>
        </DD
><DT
><A
HREF="#SET-ROOT-BRIDGE"
><IMG
SRC="../images/callouts/2.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(2)"></A
></DT
><DD
>Here the script sets the bridge's priority (relative to
          other bridges in the net) to 0.
          This is indicating that this bridge will become the root bridge
          as long as there is no other bridge with a lower priority level
          available.
        </DD
><DIV
CLASS="IMPORTANT"
><BLOCKQUOTE
CLASS="IMPORTANT"
><P
><B
>Important: </B
>In the init script of the backup bridge this line in missing,
            leaving it with the default priority of 100.
          </P
></BLOCKQUOTE
></DIV
><DT
><A
HREF="#ADDIF-ETH0"
><IMG
SRC="../images/callouts/3.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(3)"></A
><A
HREF="#ADDIF-ETH1"
><IMG
SRC="../images/callouts/4.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(4)"></A
><A
HREF="#ADDIF-ETH2"
><IMG
SRC="../images/callouts/5.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(5)"></A
><A
HREF="#ADDIF-ETH3"
><IMG
SRC="../images/callouts/6.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(6)"></A
></DT
><DD
>Enslaves the Ethernet interface to become a port in the
          bridge.
        </DD
><DT
><A
HREF="#UP-ETH0"
><IMG
SRC="../images/callouts/7.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(7)"></A
><A
HREF="#UP-ETH1"
><IMG
SRC="../images/callouts/8.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(8)"></A
><A
HREF="#UP-ETH2"
><IMG
SRC="../images/callouts/9.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(9)"></A
><A
HREF="#UP-ETH3"
><IMG
SRC="../images/callouts/10.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(10)"></A
></DT
><DD
>Takes away any possibly disturbing IP-address and brings the
          interface up.
        </DD
><DT
><A
HREF="#HELLO-1"
><B
>(11)</B
></A
></DT
><DD
>Setting the hello time of the bridge to one second makes it
          possible to reduce the maxage value of the bridges inside the
          network.
        </DD
><DT
><A
HREF="#MAXAGE-4"
><B
>(12)</B
></A
></DT
><DD
>Setting the time the a bridge is waiting before starting the
          takeover process to a shorter period.
        </DD
><DT
><A
HREF="#FORWARDDELAY-4"
><B
>(13)</B
></A
></DT
><DD
>Forcing the bridge to forward earlier than the default time.
        </DD
><DT
><A
HREF="#DELIF-ETH3"
><B
>(14)</B
></A
><A
HREF="#DELIF-ETH2"
><B
>(15)</B
></A
><A
HREF="#DELIF-ETH1"
><B
>(16)</B
></A
><A
HREF="#DELIF-ETH0"
><B
>(17)</B
></A
></DT
><DD
>Take the Ethernet out of the bridging instance.
        </DD
><DT
><A
HREF="#DESTROY-BRIDGE"
><B
>(18)</B
></A
></DT
><DD
>Destroy the bridge instance.
        </DD
><DT
><A
HREF="#REMOVE-MODULE"
><B
>(19)</B
></A
></DT
><DD
>Remove the bridge module.
        </DD
></DL
></DIV
><P
>To polish your setup and to be able to reach the bridge from
      remote you now can configure your bridge instance as if it would be
      a physical existing network interface.
      You can give it a nice IP with a suitable net-mask.
      It doesn't matter from which segment in you net, you will reach the
      bridge with this IP-address.
    </P
></DIV
><DIV
CLASS="SECT2"
><HR><H2
CLASS="SECT2"
><A
NAME="SEE-IT-WORK"
>8.3. See It Work</A
></H2
><P
>Here I want to show and explain about how the running bridge shows
      up.
      The output <A
HREF="#SAMPLE-BRIDGE-STATUS-MBB1"
>Example 17</A
> of
      <EM
>bridge@mbb-1</EM
> is the output of the
      primary bridge, while you see in
      <A
HREF="#SAMPLE-BRIDGE-STATUS-MBB2"
>Example 18</A
> the output of the backup
      bridge waiting to take over.
    </P
><DIV
CLASS="EXAMPLE"
><A
NAME="SAMPLE-BRIDGE-STATUS-MBB1"
></A
><P
><B
>Example 17. Status Output Of mbb-1 Fully Up</B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>mueb
 bridge id		0000.0800062815f6
 designated root	0000.0800062815f6
 root port		   0			path cost		   0
 max age		   4.00			bridge max age		   4.00
 hello time		   1.00			bridge hello time	   1.00
 forward delay		   4.00			bridge forward delay	   4.00
 ageing time		 300.00			gc interval		   4.00
 hello timer		   0.80			tcn timer		   0.00
 topology change timer	   0.00			gc timer		   3.80
 flags			


eth0 (1)
 port id		8001			state			forwarding
 designated root	0000.0800062815f6	path cost		 100
 designated bridge	0000.0800062815f6	message age timer	   0.00
 designated port	8001			forward delay timer	   0.00
 designated cost	   0			hold timer		   0.80
 flags			

eth1 (2)
 port id		8002			state			forwarding
 designated root	0000.0800062815f6	path cost		 100
 designated bridge	0000.0800062815f6	message age timer	   0.00
 designated port	8002			forward delay timer	   0.00
 designated cost	   0			hold timer		   0.80
 flags			

eth2 (3)
 port id		8003			state			forwarding
 designated root	0000.0800062815f6	path cost		 100
 designated bridge	0000.0800062815f6	message age timer	   0.00
 designated port	8003			forward delay timer	   0.00
 designated cost	   0			hold timer		   0.80
 flags			

eth3 (4)
 port id		8004			state			forwarding
 designated root	0000.0800062815f6	path cost		 100
 designated bridge	0000.0800062815f6	message age timer	   0.00
 designated port	8004			forward delay timer	   0.00
 designated cost	   0			hold timer		   0.80
 flags			
      </PRE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="SAMPLE-BRIDGE-STATUS-MBB2"
></A
><P
><B
>Example 18. Status Output Of mbb-2 Fully Up</B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>mueb
 bridge id		0064.00a024d04cd6
 designated root	0000.0800062815f6
 root port		   1			path cost		 100
 max age		   4.00			bridge max age		   4.00
 hello time		   1.00			bridge hello time	   1.00
 forward delay		   4.00			bridge forward delay	   4.00
 ageing time		 300.00			gc interval		   4.00
 hello timer		   0.00			tcn timer		   0.00
 topology change timer	   0.00			gc timer		   2.39
 flags			


eth0 (1)
 port id		8001			state			forwarding
 designated root	0000.0800062815f6	path cost		 100
 designated bridge	0000.0800062815f6	message age timer	   0.42
 designated port	8001			forward delay timer	   0.00
 designated cost	   0			hold timer		   0.00
 flags			

eth1 (2)
 port id		8002			state			blocking
 designated root	0000.0800062815f6	path cost		 100
 designated bridge	0000.0800062815f6	message age timer	   0.42
 designated port	8002			forward delay timer	   0.00
 designated cost	   0			hold timer		   0.00
 flags			

eth2 (3)
 port id		8003			state			blocking
 designated root	0000.0800062815f6	path cost		 100
 designated bridge	0000.0800062815f6	message age timer	   0.42
 designated port	8003			forward delay timer	   0.00
 designated cost	   0			hold timer		   0.00
 flags			

eth3 (4)
 port id		8004			state			blocking
 designated root	0000.0800062815f6	path cost		 100
 designated bridge	0000.0800062815f6	message age timer	   0.42
 designated port	8004			forward delay timer	   0.00
 designated cost	   0			hold timer		   0.00
 flags			
      </PRE
></TD
></TR
></TABLE
></DIV
><P
>If you take a glance into
      <TT
CLASS="FILENAME"
>/var/log/messages</TT
> as shown in
      <A
HREF="#MESSAGES-FROM-INIT-2-AT-MBB-1"
>Example 19</A
> and in
      <A
HREF="#MESSAGES-FROM-INIT-2-AT-MBB-2"
>Example 20</A
> you can see
      how the bridges are coming up and deciding how to do their
      duty.
      <SPAN
CLASS="ACRONYM"
>mbb-1</SPAN
> has a lower value for bridge-priority
      (see <A
HREF="#BRCTL-SETBRIDGEPRIO"
><A
HREF="#BRCTL-SETBRIDGEPRIO"
><IMG
SRC="../images/callouts/9.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(9)"></A
></A
>),
      telling it to try to become the root bridge.
      As you can see <SPAN
CLASS="ACRONYM"
>mbb-1</SPAN
> forwards all ports,
      while <SPAN
CLASS="ACRONYM"
>mbb-2</SPAN
> blocks all ports with the exception
      of eth0.
    </P
><DIV
CLASS="EXAMPLE"
><A
NAME="MESSAGES-FROM-INIT-2-AT-MBB-1"
></A
><P
><B
>Example 19. <SPAN
CLASS="ACRONYM"
>mbb-1</SPAN
> Messages From
        <B
CLASS="COMMAND"
>init 2</B
></B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>May 25 16:46:04 mbb-1 init: Switching to runlevel: 2
May 25 16:46:04 mbb-1 kernel: NET4: Ethernet Bridge 008 for NET4.0
May 25 16:46:04 mbb-1 kernel: device eth0 entered promiscuous mode
May 25 16:46:04 mbb-1 kernel: device eth1 entered promiscuous mode
May 25 16:46:04 mbb-1 kernel: device eth2 entered promiscuous mode
May 25 16:46:04 mbb-1 kernel: device eth3 entered promiscuous mode
May 25 16:46:04 mbb-1 kernel: mueb: port 4(eth3) entering listening state
May 25 16:46:04 mbb-1 kernel: mueb: port 3(eth2) entering listening state
May 25 16:46:04 mbb-1 kernel: mueb: port 2(eth1) entering listening state
May 25 16:46:04 mbb-1 kernel: mueb: port 1(eth0) entering listening state
May 25 16:46:08 mbb-1 kernel: mueb: port 4(eth3) entering learning state
May 25 16:46:08 mbb-1 kernel: mueb: port 3(eth2) entering learning state
May 25 16:46:08 mbb-1 kernel: mueb: port 2(eth1) entering learning state
May 25 16:46:08 mbb-1 kernel: mueb: port 1(eth0) entering learning state
May 25 16:46:12 mbb-1 kernel: mueb: port 4(eth3) entering forwarding state
May 25 16:46:12 mbb-1 kernel: mueb: topology change detected, propagating
May 25 16:46:12 mbb-1 kernel: mueb: port 3(eth2) entering forwarding state
May 25 16:46:12 mbb-1 kernel: mueb: topology change detected, propagating
May 25 16:46:12 mbb-1 kernel: mueb: port 2(eth1) entering forwarding state
May 25 16:46:12 mbb-1 kernel: mueb: topology change detected, propagating
May 25 16:46:12 mbb-1 kernel: mueb: port 1(eth0) entering forwarding state
May 25 16:46:12 mbb-1 kernel: mueb: topology change detected, propagating
      </PRE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="MESSAGES-FROM-INIT-2-AT-MBB-2"
></A
><P
><B
>Example 20. <SPAN
CLASS="ACRONYM"
>mbb-2</SPAN
> Messages From
        <B
CLASS="COMMAND"
>init 2</B
></B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>Jun  8 06:06:16 mbb-2 init: Switching to runlevel: 2
Jun  8 06:06:17 mbb-2 kernel: NET4: Ethernet Bridge 008 for NET4.0
Jun  8 06:06:17 mbb-2 kernel: device eth0 entered promiscuous mode
Jun  8 06:06:17 mbb-2 kernel: device eth1 entered promiscuous mode
Jun  8 06:06:17 mbb-2 kernel: device eth2 entered promiscuous mode
Jun  8 06:06:17 mbb-2 kernel: device eth3 entered promiscuous mode
Jun  8 06:06:17 mbb-2 kernel: mueb: port 4(eth3) entering listening state
Jun  8 06:06:17 mbb-2 kernel: mueb: port 3(eth2) entering listening state
Jun  8 06:06:17 mbb-2 kernel: mueb: port 2(eth1) entering listening state
Jun  8 06:06:17 mbb-2 kernel: mueb: port 1(eth0) entering listening state
Jun  8 06:06:17 mbb-2 kernel: mueb: port 2(eth1) entering blocking state
Jun  8 06:06:17 mbb-2 kernel: mueb: port 3(eth2) entering blocking state
Jun  8 06:06:17 mbb-2 kernel: mueb: port 4(eth3) entering blocking state
Jun  8 06:06:21 mbb-2 kernel: mueb: port 1(eth0) entering learning state
Jun  8 06:06:25 mbb-2 kernel: mueb: port 1(eth0) entering forwarding state
      </PRE
></TD
></TR
></TABLE
></DIV
></DIV
><DIV
CLASS="SECT2"
><HR><H2
CLASS="SECT2"
><A
NAME="BRIDGE-TESTS"
>8.4. Bridge Tests</A
></H2
><P
>To check if really all the promised features are working, I did
      some crude test.
      The message logs are shown here in.
    </P
><DIV
CLASS="SECT3"
><HR><H3
CLASS="SECT3"
><A
NAME="TEAR-THE-PATCH-WIRE-TEST"
>8.4.1. Tear The Patch Wire Test</A
></H3
><P
>        I think just taking a patch wire out of a bridge port is a really good
        real survival test.
        So I pulled the plugs one by one out of the sockets and looked what
        happened.
        To give you not too much tension let me summarize first:
        <EM
>It's really working</EM
>.
        All the takeovers happened within less then 12 seconds.
      </P
><P
>The really interesting messages you can find at
        <SPAN
CLASS="ACRONYM"
>mbb-2</SPAN
>.
        To see how everything comes up, I stopped network services first.

        In <A
HREF="#MBB-2-MESSAGES-OF-BRIDGE-TEST"
>Example 21</A
> you will see
        the messages caused by a <B
CLASS="COMMAND"
>init 2</B
> followed
        by a <SPAN
CLASS="QUOTE"
>"take out the plug, wait what happens, then place it
        back"</SPAN
> in the order eth3, eth2, eth1, eth0 .
      </P
><DIV
CLASS="NOTE"
><BLOCKQUOTE
CLASS="NOTE"
><P
><B
>Note: </B
>The thing I did, was making the tests, and publishing the dump.
          The one writing the nice explanations was Lennert again.
        </P
></BLOCKQUOTE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="MBB-2-MESSAGES-OF-BRIDGE-TEST"
></A
><P
><B
>Example 21. <SPAN
CLASS="ACRONYM"
>mbb-2</SPAN
> Message Output Of Bridge Test</B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>Jun  8 06:06:16 mbb-2 init: Switching to runlevel: 2
Jun  8 06:06:17 mbb-2 kernel: NET4: Ethernet Bridge 008 for NET4.0
Jun  8 06:06:17 mbb-2 kernel: device eth0 entered promiscuous mode
Jun  8 06:06:17 mbb-2 kernel: device eth1 entered promiscuous mode
Jun  8 06:06:17 mbb-2 kernel: device eth2 entered promiscuous mode
Jun  8 06:06:17 mbb-2 kernel: device eth3 entered promiscuous mode
Jun  8 06:06:17 mbb-2 kernel: mueb: port 4(eth3) entering listening state
Jun  8 06:06:17 mbb-2 kernel: mueb: port 3(eth2) entering listening state
Jun  8 06:06:17 mbb-2 kernel: mueb: port 2(eth1) entering listening state
Jun  8 06:06:17 mbb-2 kernel: mueb: port 1(eth0) entering listening state                 <A
NAME="SEE-OTHER-BRIDGE"
><IMG
SRC="../images/callouts/1.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(1)"></A
>
Jun  8 06:06:17 mbb-2 kernel: mueb: port 2(eth1) entering blocking state
Jun  8 06:06:17 mbb-2 kernel: mueb: port 3(eth2) entering blocking state
Jun  8 06:06:17 mbb-2 kernel: mueb: port 4(eth3) entering blocking state
Jun  8 06:06:21 mbb-2 kernel: mueb: port 1(eth0) entering learning state
Jun  8 06:06:25 mbb-2 kernel: mueb: port 1(eth0) entering forwarding state                <A
NAME="KEEP-ONE-INTERFACE"
><IMG
SRC="../images/callouts/2.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(2)"></A
>
Jun  8 06:07:15 mbb-2 kernel: mueb: neighbour 0000.08:00:06:28:15:f6 lost on port 4(eth3) <A
NAME="PULL-PLUG-ETH3"
><IMG
SRC="../images/callouts/3.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(3)"></A
>
Jun  8 06:07:15 mbb-2 kernel: mueb: port 4(eth3) entering listening state                 <A
NAME="ENTER-LISTEN-STATE"
><IMG
SRC="../images/callouts/4.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(4)"></A
>
Jun  8 06:07:19 mbb-2 kernel: mueb: port 4(eth3) entering learning state                  <A
NAME="ENTER-LEARN-STATE"
><IMG
SRC="../images/callouts/5.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(5)"></A
>
Jun  8 06:07:23 mbb-2 kernel: mueb: port 4(eth3) entering forwarding state                <A
NAME="ENTER-FORWARD-STATE"
><IMG
SRC="../images/callouts/6.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(6)"></A
>
Jun  8 06:07:23 mbb-2 kernel: mueb: topology change detected, sending tcn bpdu            <A
NAME="TOPOLOGY-CHANGE-DETECT"
><IMG
SRC="../images/callouts/7.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(7)"></A
>
Jun  8 06:08:51 mbb-2 kernel: mueb: topology change detected, sending tcn bpdu            <A
NAME="TOPOLOGY-CHANGED-AGAIN"
><IMG
SRC="../images/callouts/8.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(8)"></A
>
Jun  8 06:08:51 mbb-2 kernel: mueb: port 4(eth3) entering blocking state                  <A
NAME="ROOT-IS-BACK"
><IMG
SRC="../images/callouts/9.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(9)"></A
>
Jun  8 06:09:22 mbb-2 kernel: mueb: neighbour 0000.08:00:06:28:15:f6 lost on port 3(eth2) <A
NAME="FROM-PULL-TO-BACK-ETH2"
><IMG
SRC="../images/callouts/10.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(10)"></A
>
Jun  8 06:09:22 mbb-2 kernel: mueb: port 3(eth2) entering listening state
Jun  8 06:09:26 mbb-2 kernel: mueb: port 3(eth2) entering learning state
Jun  8 06:09:30 mbb-2 kernel: mueb: port 3(eth2) entering forwarding state
Jun  8 06:09:30 mbb-2 kernel: mueb: topology change detected, sending tcn bpdu
Jun  8 06:10:09 mbb-2 kernel: mueb: topology change detected, sending tcn bpdu
Jun  8 06:10:09 mbb-2 kernel: mueb: port 3(eth2) entering blocking state
Jun  8 06:10:10 mbb-2 kernel: mueb: retransmitting tcn bpdu                               <A
NAME="RETRANSMIT-TCN-BPDU"
><B
>(11)</B
></A
>
Jun  8 06:10:41 mbb-2 kernel: mueb: neighbour 0000.08:00:06:28:15:f6 lost on port 2(eth1) <A
NAME="FROM-PULL-TO-BACK-ETH1"
><B
>(12)</B
></A
>
Jun  8 06:10:41 mbb-2 kernel: mueb: port 2(eth1) entering listening state
Jun  8 06:10:45 mbb-2 kernel: mueb: port 2(eth1) entering learning state
Jun  8 06:10:49 mbb-2 kernel: mueb: port 2(eth1) entering forwarding state
Jun  8 06:10:49 mbb-2 kernel: mueb: topology change detected, sending tcn bpdu
Jun  8 06:11:06 mbb-2 kernel: mueb: topology change detected, sending tcn bpdu
Jun  8 06:11:06 mbb-2 kernel: mueb: port 2(eth1) entering blocking state
Jun  8 06:11:33 mbb-2 kernel: mueb: neighbour 0000.08:00:06:28:15:f6 lost on port 1(eth0) <A
NAME="FROM-PULL-TO-BACK-ETH0"
><B
>(13)</B
></A
>
Jun  8 06:11:33 mbb-2 kernel: mueb: port 2(eth1) entering listening state
Jun  8 06:11:37 mbb-2 kernel: mueb: port 2(eth1) entering learning state
Jun  8 06:11:41 mbb-2 kernel: mueb: port 2(eth1) entering forwarding state
Jun  8 06:11:41 mbb-2 kernel: mueb: topology change detected, sending tcn bpdu
Jun  8 06:14:18 mbb-2 kernel: mueb: topology change detected, sending tcn bpdu
Jun  8 06:14:18 mbb-2 kernel: mueb: port 2(eth1) entering blocking state
Jun  8 06:14:19 mbb-2 kernel: mueb: retransmitting tcn bpdu
        </PRE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="CALLOUTLIST"
><DL
COMPACT="COMPACT"
><DT
><A
HREF="#SEE-OTHER-BRIDGE"
><IMG
SRC="../images/callouts/1.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(1)"></A
></DT
><DD
>The kernel sees that there are already bridges (actually,
             only one of them, but Hello packets are coming in on all 4 of
             the ports) on eth[0123].
           </DD
><DT
><A
HREF="#KEEP-ONE-INTERFACE"
><IMG
SRC="../images/callouts/2.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(2)"></A
></DT
><DD
>To maintain connectivity with the rest of the network, the
             bridge decides to keep port 1 (eth0) active (i.e. in the
             <SPAN
CLASS="QUOTE"
>"forwarding"</SPAN
> state), and to temporarily disable
             ports 2-4.
           </DD
><DT
><A
HREF="#PULL-PLUG-ETH3"
><IMG
SRC="../images/callouts/3.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(3)"></A
></DT
><DD
>The plug on eth3 was pulled.
             Here you can see that the message age timer expired
             (<A
HREF="#BRCTL-SETMAXAGE"
><A
HREF="#BRCTL-SETMAXAGE"
><B
>(13)</B
></A
></A
>).
             The last Hello packet was seen more than X seconds ago.
             The bridge concludes that the connection to the bridge that
             was there has died.
             Therefore, it is going to try to enable this port, to provide
             network connectivity to the now-cutoff segment.
           </DD
><DT
><A
HREF="#ENTER-LISTEN-STATE"
><IMG
SRC="../images/callouts/4.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(4)"></A
></DT
><DD
>It enters the listening state.
             It waits to see whether the old bridge might come back, or
             whether another bridge is going to claim takeover.
           </DD
><DT
><A
HREF="#ENTER-LEARN-STATE"
><IMG
SRC="../images/callouts/5.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(5)"></A
></DT
><DD
>Okay, no other bridge was seen.
             We're going to try to provide network connectivity to this
             segment ourselves.
             Which means: we're going to try and become
             <SPAN
CLASS="QUOTE"
>"designated bridge"</SPAN
> for this segment.
             We now enter the learning state.
             In this state, we only learn <SPAN
CLASS="ACRONYM"
>MAC</SPAN
> addresses and we do not
             forward yet.
             This is because if we see an unknown destination address, we
             send the datagram to all ports, and this <SPAN
CLASS="QUOTE"
>"flooding"</SPAN
>
             will happen unnecessarily often if we have a empty <SPAN
CLASS="ACRONYM"
>MAC</SPAN
> table.
             Therefore, we're going to fill up our <SPAN
CLASS="ACRONYM"
>MAC</SPAN
> table with useful
             entries first, and this is what happens during the learning
             state.
           </DD
><DT
><A
HREF="#ENTER-FORWARD-STATE"
><IMG
SRC="../images/callouts/6.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(6)"></A
></DT
><DD
>Okay, here we go.
             Pray for us.
           </DD
><DT
><A
HREF="#TOPOLOGY-CHANGE-DETECT"
><IMG
SRC="../images/callouts/7.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(7)"></A
></DT
><DD
>Because we took over for this segment, all communication
             towards this segment now goes through this bridge.
             This means that the topology has changed.
             If the topology changes, we must let all bridges now, so that
             they can time out stale <SPAN
CLASS="ACRONYM"
>MAC</SPAN
> address location data quickly.
             This is why we send Topology Change Notification Bridge
             Protocol Data Units (tcn bpdus).
           </DD
><DD
><P
>Apparently the root bridge immediately acknowledges this
             tcn bpdu in the next Hello message it sends (the protocol
             requires for the root bridge to acknowledge it), because this
             is the only such message we see.
             <DIV
CLASS="NOTE"
><BLOCKQUOTE
CLASS="NOTE"
><P
><B
>Note: </B
>In situations where you see loads of these messages,
                 it means that the root bridge cannot acknowledge them,
                 which probably means your root bridge has a twisted STP
                 implementation.
               </P
></BLOCKQUOTE
></DIV
>
           </P
></DD
><DT
><A
HREF="#TOPOLOGY-CHANGED-AGAIN"
><IMG
SRC="../images/callouts/8.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(8)"></A
></DT
><DD
>Hey, something happened again!
           </DD
><DT
><A
HREF="#ROOT-IS-BACK"
><IMG
SRC="../images/callouts/9.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(9)"></A
></DT
><DD
>Yup... eth3 came back online.
             The root bridge will provide connectivity for this segment
             again, so that we can disable this port.
           </DD
><DT
><A
HREF="#FROM-PULL-TO-BACK-ETH2"
><IMG
SRC="../images/callouts/10.gif"
HSPACE="0"
VSPACE="0"
BORDER="0"
ALT="(10)"></A
><A
HREF="#FROM-PULL-TO-BACK-ETH1"
><B
>(12)</B
></A
><A
HREF="#FROM-PULL-TO-BACK-ETH0"
><B
>(13)</B
></A
></DT
><DD
>Same story for eth2, eth1 and eth0.
           </DD
><DT
><A
HREF="#RETRANSMIT-TCN-BPDU"
><B
>(11)</B
></A
></DT
><DD
>This means the tcn bpdu wasn't acknowledged quick enough.
             That is why it is retransmitted.
           </DD
></DL
></DIV
><P
>The root bridge <SPAN
CLASS="ACRONYM"
>mbb-1</SPAN
> was not so chatty.
        It only reported some topology changes and propagated them as you can
        see in <A
HREF="#MBB-1-MESSAGES-OF-BRIDGE-TEST"
>Example 22</A
>.
        If somebody can offer a explanation why the root bridge is so quiet in
        messaging please <A
HREF="mailto:uwe@bnhof"
TARGET="_top"
>tell me</A
>.
      </P
><DIV
CLASS="EXAMPLE"
><A
NAME="MBB-1-MESSAGES-OF-BRIDGE-TEST"
></A
><P
><B
>Example 22. <SPAN
CLASS="ACRONYM"
>mbb-2</SPAN
> Message Output Of Bridge Test</B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>Jun  8 06:06:52 mbb-1 kernel: mueb: received tcn bpdu on port 1(eth0)
Jun  8 06:06:52 mbb-1 kernel: mueb: topology change detected, propagating
Jun  8 06:07:31 mbb-1 kernel: mueb: received tcn bpdu on port 1(eth0)
Jun  8 06:07:31 mbb-1 kernel: mueb: topology change detected, propagating
Jun  8 06:07:32 mbb-1 kernel: mueb: received tcn bpdu on port 1(eth0)
Jun  8 06:07:32 mbb-1 kernel: mueb: topology change detected, propagating
Jun  8 06:08:11 mbb-1 kernel: mueb: received tcn bpdu on port 1(eth0)
Jun  8 06:08:11 mbb-1 kernel: mueb: topology change detected, propagating
Jun  8 06:08:29 mbb-1 kernel: mueb: received tcn bpdu on port 1(eth0)
Jun  8 06:08:29 mbb-1 kernel: mueb: topology change detected, propagating
Jun  8 06:09:03 mbb-1 kernel: mueb: received tcn bpdu on port 2(eth1)
Jun  8 06:09:03 mbb-1 kernel: mueb: topology change detected, propagating
Jun  8 06:11:40 mbb-1 kernel: mueb: received tcn bpdu on port 1(eth0)
Jun  8 06:11:40 mbb-1 kernel: mueb: topology change detected, propagating
Jun  8 06:11:41 mbb-1 kernel: mueb: received tcn bpdu on port 1(eth0)
Jun  8 06:11:41 mbb-1 kernel: mueb: topology change detected, propagating
        </PRE
></TD
></TR
></TABLE
><P
>One of the other bridges tells us that the topology of the LAN
          has changed (see <A
HREF="#MBB-2-MESSAGES-OF-BRIDGE-TEST"
>Example 21</A
>).
          Well, okay.
          We will set lower timeouts on our <SPAN
CLASS="ACRONYM"
>MAC</SPAN
>C table for a short period of
          time, and we will propagate this topology change throughout the
          network.
        </P
></DIV
></DIV
><DIV
CLASS="SECT3"
><HR><H3
CLASS="SECT3"
><A
NAME="KILL-THE-ROOT-BRIDGE-TEST"
>8.4.2. Kill The Root Bridge Test</A
></H3
><P
>The ultimate test is of course a total blocking, breakdown or
        something similar to the root bridge.
        I did this by shooting down the root bridge by
        <B
CLASS="COMMAND"
>init 1</B
>.
        Next I brought it up again with <B
CLASS="COMMAND"
>init 2</B
>.
        Last I pulled all plugs out of the root bridge and waited for some
        time before I placed them again.
        In <A
HREF="#TEST-MESSAGES-OF-MASTER-BRIDGE"
>Example 23</A
> you will see
        the messages from the master-bridge mbb-1, and in
        <A
HREF="#TEST-MESSAGES-OF-BACKUP-BRIDGE"
>Example 24</A
> you see what
        happened the same time at the backup-bridge mbb-2.
      </P
><DIV
CLASS="EXAMPLE"
><A
NAME="TEST-MESSAGES-OF-MASTER-BRIDGE"
></A
><P
><B
>Example 23. Test Messages Of Master Bridge <SPAN
CLASS="ACRONYM"
>mbb-1</SPAN
></B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>Jun 12 13:35:15 mbb-1 init: Switching to runlevel: 1
Jun 12 13:35:20 mbb-1 kernel: mueb: port 4(eth3) entering disabled state
Jun 12 13:35:20 mbb-1 kernel: mueb: port 3(eth2) entering disabled state
Jun 12 13:35:20 mbb-1 kernel: mueb: port 2(eth1) entering disabled state
Jun 12 13:35:20 mbb-1 kernel: mueb: port 1(eth0) entering disabled state
Jun 12 13:35:20 mbb-1 kernel: mueb: port 2(eth1) entering disabled state
Jun 12 13:35:20 mbb-1 kernel: device eth1 left promiscuous mode
Jun 12 13:35:20 mbb-1 kernel: mueb: port 1(eth0) entering disabled state
Jun 12 13:35:20 mbb-1 kernel: device eth0 left promiscuous mode
Jun 12 13:35:20 mbb-1 kernel: mueb: port 4(eth3) entering disabled state
Jun 12 13:35:20 mbb-1 kernel: device eth3 left promiscuous mode
Jun 12 13:35:20 mbb-1 kernel: mueb: port 3(eth2) entering disabled state
Jun 12 13:35:20 mbb-1 kernel: device eth2 left promiscuous mode
Jun 12 13:35:50 mbb-1 init: Switching to runlevel: 2
Jun 12 13:35:50 mbb-1 kernel: NET4: Ethernet Bridge 008 for NET4.0
Jun 12 13:35:51 mbb-1 kernel: device eth0 entered promiscuous mode
Jun 12 13:35:51 mbb-1 kernel: device eth1 entered promiscuous mode
Jun 12 13:35:51 mbb-1 kernel: device eth2 entered promiscuous mode
Jun 12 13:35:51 mbb-1 kernel: device eth3 entered promiscuous mode
Jun 12 13:35:51 mbb-1 kernel: mueb: port 4(eth3) entering listening state
Jun 12 13:35:51 mbb-1 kernel: mueb: port 3(eth2) entering listening state
Jun 12 13:35:51 mbb-1 kernel: mueb: port 2(eth1) entering listening state
Jun 12 13:35:51 mbb-1 kernel: mueb: port 1(eth0) entering listening state
Jun 12 13:35:51 mbb-1 kernel: mueb: received tcn bpdu on port 2(eth1)
Jun 12 13:35:51 mbb-1 kernel: mueb: topology change detected, propagating
Jun 12 13:35:52 mbb-1 kernel: mueb: received tcn bpdu on port 1(eth0)
Jun 12 13:35:52 mbb-1 kernel: mueb: topology change detected, propagating
Jun 12 13:35:55 mbb-1 kernel: mueb: port 4(eth3) entering learning state
Jun 12 13:35:55 mbb-1 kernel: mueb: port 3(eth2) entering learning state
Jun 12 13:35:55 mbb-1 kernel: mueb: port 2(eth1) entering learning state
Jun 12 13:35:55 mbb-1 kernel: mueb: port 1(eth0) entering learning state
Jun 12 13:35:59 mbb-1 kernel: mueb: port 4(eth3) entering forwarding state
Jun 12 13:35:59 mbb-1 kernel: mueb: topology change detected, propagating
Jun 12 13:35:59 mbb-1 kernel: mueb: port 3(eth2) entering forwarding state
Jun 12 13:35:59 mbb-1 kernel: mueb: topology change detected, propagating
Jun 12 13:35:59 mbb-1 kernel: mueb: port 2(eth1) entering forwarding state
Jun 12 13:35:59 mbb-1 kernel: mueb: topology change detected, propagating
Jun 12 13:35:59 mbb-1 kernel: mueb: port 1(eth0) entering forwarding state
Jun 12 13:35:59 mbb-1 kernel: mueb: topology change detected, propagating
Jun 12 13:39:03 mbb-1 kernel: mueb: received tcn bpdu on port 1(eth0)
Jun 12 13:39:03 mbb-1 kernel: mueb: topology change detected, propagating
Jun 12 13:39:05 mbb-1 kernel: mueb: received tcn bpdu on port 1(eth0)
Jun 12 13:39:05 mbb-1 kernel: mueb: topology change detected, propagating
        </PRE
></TD
></TR
></TABLE
><P
></P
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="TEST-MESSAGES-OF-BACKUP-BRIDGE"
></A
><P
><B
>Example 24. Test Messages Of Backup Bridge <SPAN
CLASS="ACRONYM"
>mbb-2</SPAN
></B
></P
><TABLE
BORDER="0"
BGCOLOR="#E0E0E0"
WIDTH="100%"
><TR
><TD
><PRE
CLASS="SCREEN"
>Jun 12 13:35:21 mbb-2 kernel: mueb: neighbour 0000.08:00:06:28:15:f6 lost on port 4(eth3)
Jun 12 13:35:21 mbb-2 kernel: mueb: port 4(eth3) entering listening state
Jun 12 13:35:21 mbb-2 kernel: mueb: neighbour 0000.08:00:06:28:15:f6 lost on port 3(eth2)
Jun 12 13:35:21 mbb-2 kernel: mueb: port 3(eth2) entering listening state
Jun 12 13:35:21 mbb-2 kernel: mueb: neighbour 0000.08:00:06:28:15:f6 lost on port 2(eth1)
Jun 12 13:35:21 mbb-2 kernel: mueb: port 2(eth1) entering listening state
Jun 12 13:35:21 mbb-2 kernel: mueb: neighbour 0000.08:00:06:28:15:f6 lost on port 1(eth0)
Jun 12 13:35:21 mbb-2 kernel: mueb: topology change detected, propagating
Jun 12 13:35:25 mbb-2 kernel: mueb: port 4(eth3) entering learning state
Jun 12 13:35:25 mbb-2 kernel: mueb: port 3(eth2) entering learning state
Jun 12 13:35:25 mbb-2 kernel: mueb: port 2(eth1) entering learning state
Jun 12 13:35:29 mbb-2 kernel: mueb: port 4(eth3) entering forwarding state
Jun 12 13:35:29 mbb-2 kernel: mueb: topology change detected, propagating
Jun 12 13:35:29 mbb-2 kernel: mueb: port 3(eth2) entering forwarding state
Jun 12 13:35:29 mbb-2 kernel: mueb: topology change detected, propagating
Jun 12 13:35:29 mbb-2 kernel: mueb: port 2(eth1) entering forwarding state
Jun 12 13:35:29 mbb-2 kernel: mueb: topology change detected, propagating
Jun 12 13:35:49 mbb-2 kernel: mueb: topology change detected, sending tcn bpdu
Jun 12 13:35:49 mbb-2 kernel: mueb: port 3(eth2) entering blocking state
Jun 12 13:35:49 mbb-2 kernel: mueb: topology change detected, \
                              &#60;6&#62;mueb: port 4(eth3) entering blocking state
Jun 12 13:35:49 mbb-2 kernel: mueb: topology change detected, \
                              &#60;6&#62;mueb: port 2(eth1) entering blocking state
Jun 12 13:35:50 mbb-2 kernel: mueb: retransmitting tcn bpdu
Jun 12 13:38:26 mbb-2 kernel: mueb: neighbour 0000.08:00:06:28:15:f6 lost on port 2(eth1)
Jun 12 13:38:26 mbb-2 kernel: mueb: port 2(eth1) entering listening state
Jun 12 13:38:27 mbb-2 kernel: mueb: neighbour 0000.08:00:06:28:15:f6 lost on port 3(eth2)
Jun 12 13:38:27 mbb-2 kernel: mueb: port 3(eth2) entering listening state
Jun 12 13:38:28 mbb-2 kernel: mueb: neighbour 0000.08:00:06:28:15:f6 lost on port 4(eth3)
Jun 12 13:38:28 mbb-2 kernel: mueb: port 4(eth3) entering listening state
Jun 12 13:38:30 mbb-2 kernel: mueb: port 2(eth1) entering learning state
Jun 12 13:38:30 mbb-2 kernel: mueb: neighbour 0000.08:00:06:28:15:f6 lost on port 1(eth0)
Jun 12 13:38:30 mbb-2 kernel: mueb: topology change detected, propagating
Jun 12 13:38:31 mbb-2 kernel: mueb: port 3(eth2) entering learning state
Jun 12 13:38:32 mbb-2 kernel: mueb: port 4(eth3) entering learning state
Jun 12 13:38:34 mbb-2 kernel: mueb: port 2(eth1) entering forwarding state
Jun 12 13:38:34 mbb-2 kernel: mueb: topology change detected, propagating
Jun 12 13:38:35 mbb-2 kernel: mueb: port 3(eth2) entering forwarding state
Jun 12 13:38:35 mbb-2 kernel: mueb: topology change detected, propagating
Jun 12 13:38:36 mbb-2 kernel: mueb: port 4(eth3) entering forwarding state
Jun 12 13:38:36 mbb-2 kernel: mueb: topology change detected, propagating
Jun 12 13:39:01 mbb-2 kernel: mueb: topology change detected, sending tcn bpdu
Jun 12 13:39:01 mbb-2 kernel: mueb: port 3(eth2) entering blocking state
Jun 12 13:39:01 mbb-2 kernel: mueb: topology change detected, \
                              &#60;6&#62;mueb: port 4(eth3) entering blocking state
Jun 12 13:39:02 mbb-2 kernel: mueb: topology change detected, sending tcn bpdu
Jun 12 13:39:02 mbb-2 kernel: mueb: port 2(eth1) entering blocking state
        </PRE
></TD
></TR
></TABLE
><P
></P
></DIV
></DIV
></DIV
></DIV
><DIV
CLASS="APPENDIX"
><HR><H1
CLASS="APPENDIX"
><A
NAME="NIC-INFO"
>A. Network Interface Cards</A
></H1
><P
>In this section you will find a (for now)
    very incomplete list of NIC's which are known to work
    or known to cause problem.
    For I neither have the money to buy a lot of different
    NIC's, nor I have any connections to hardware vendors,
    I depend on your feedback to keep the list accurate.
    So feel free to mail about success or failure to
    <A
HREF="mailto:uwe@bnhof.de"
TARGET="_top"
>Uwe Böhme</A
>.
  </P
><P
></P
><DIV
CLASS="VARIABLELIST"
><P
><B
>Valuing Of NIC Information</B
></P
><DL
><DT
>- - -</DT
><DD
><P
>Cards I tried and are also reported not to work by other
          people
        </P
></DD
><DT
>- -</DT
><DD
><P
>Cards I tried or are reported not to work by other people
        </P
></DD
><DT
>-</DT
><DD
><P
>Cards reported not to work by other people
        </P
></DD
><DT
>+</DT
><DD
><P
>Cards reported to work by other people
        </P
></DD
><DT
>+ +</DT
><DD
><P
>Cards I tried or are reported to work by other people
        </P
></DD
><DT
>+ + +</DT
><DD
><P
>Cards I tried and are also reported to work by other people
        </P
></DD
></DL
></DIV
><P
></P
><DIV
CLASS="VARIABLELIST"
><P
><B
>NIC Information</B
></P
><DL
><DT
>3c509b Etherlink III</DT
><DD
><P
>+ +
        </P
></DD
><DT
>3c905b/3c905c</DT
><DD
><P
>+ + + Never heard about any problem
        </P
></DD
><DT
>HP J2585A</DT
><DD
><P
>- - System hang-up after <B
CLASS="COMMAND"
>ifconfig</B
>, unable to run promisc mode
        </P
></DD
><DT
>HP J2585B</DT
><DD
><P
>+ +
        </P
></DD
><DT
>AMD PCnet32 10/100</DT
><DD
><P
>+ +
        </P
></DD
><DT
>RTL (Realtek) 8029</DT
><DD
><P
>+ +
        </P
></DD
></DL
></DIV
></DIV
><DIV
CLASS="APPENDIX"
><HR><H1
CLASS="APPENDIX"
><A
NAME="RECOMMENDED-READING"
>B. Recommended Reading</A
></H1
><P
>Here you will some recommendations which documents you should read
    before you start to setup a bridge.
  </P
><P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
><A
HREF="http://www.math.leidenuniv.nl/~buytenh/bridge/"
TARGET="_top"
>The bridge home-page</A
></DT
><DD
><P
>Will give you recent information about the bridging code and
          the bridge utilities.
        </P
></DD
><DT
><A
HREF="http://www.linuxdoc.org/HOWTO/NET3-4-HOWTO.html"
TARGET="_top"
>http://www.linuxdoc.org/HOWTO/NET3-4-HOWTO</A
></DT
><DD
><P
>Describes how to install and configure the Linux networking
          software and associated tools.
        </P
></DD
><DT
><A
HREF="http://www.linuxdoc.org/HOWTO/Ethernet-HOWTO.html"
TARGET="_top"
>http://www.linuxdoc.org//HOWTO/Ethernet-HOWTO</A
></DT
><DD
><P
>Information about which Ethernet devices can be used for
          Linux, and how to set them up (focused on the hardware and low
          level driver aspect of the Ethernet cards).
        </P
></DD
></DL
></DIV
></DIV
><DIV
CLASS="APPENDIX"
><HR><H1
CLASS="APPENDIX"
><A
NAME="FAQ"
>C. FAQ</A
></H1
><P
>Here you will find some of the frequently asked questions connected
    to bridging.
  </P
><DIV
CLASS="QANDASET"
><H2
CLASS="TITLE"
>FAQ</H2
><DL
><DT
>1. <A
HREF="#AEN910"
>Hardware</A
></DT
><DD
><DL
><DT
> <A
HREF="#AEN913"
>What hardware do I need to run a bridge with
            2-<TT
CLASS="USERINPUT"
><B
>n</B
></TT
> NICs.
          </A
></DT
><DT
> <A
HREF="#AEN920"
>Can you please recommend some tools to measure a 2-port
            linux bridge throughput.
          </A
></DT
></DL
></DD
><DT
>2. <A
HREF="#AEN926"
>Software</A
></DT
><DD
><DL
><DT
> <A
HREF="#AEN929"
>I'm running with kernel x.x.x.
            Is a patch out there, to give me chance to use this stuff?
          </A
></DT
></DL
></DD
></DL
><DIV
CLASS="QANDADIV"
><H3
><A
NAME="AEN910"
></A
>1. Hardware</H3
><DIV
CLASS="QANDAENTRY"
><DIV
CLASS="QUESTION"
><P
><A
NAME="AEN913"
></A
><B
> </B
>What hardware do I need to run a bridge with
            2-<TT
CLASS="USERINPUT"
><B
>n</B
></TT
> NICs.
          </P
></DIV
><DIV
CLASS="ANSWER"
><P
><B
> </B
>I think a fat 486 or a modest Pentium should be able to keep
            up with 2x100Mbit pretty well, but I have never tested this.
            I don't think RAM will matter much (8 or 16MB and all should
            be fine).

            CPU will not matter a whole lot either (486/Pentium and all
            should be fine).
            I think the primary contributor is the type of bus (ISA, PCI)
            and the type of network cards (some network cards require less
            <SPAN
CLASS="QUOTE"
>"work"</SPAN
> than others).

            Big switches usually have immensely fat internal buses (3 or 4
            gigabits is not uncommon).
            Standard PCI, for example, can't keep up with a gigabit ethernet
            cards.
          </P
></DIV
></DIV
><DIV
CLASS="QANDAENTRY"
><DIV
CLASS="QUESTION"
><P
><A
NAME="AEN920"
></A
><B
> </B
>Can you please recommend some tools to measure a 2-port
            linux bridge throughput.
          </P
></DIV
><DIV
CLASS="ANSWER"
><P
><B
> </B
>Well, first question is: does it have 100mbit interfaces?
            If it hasn't (10mbit only), it shouldn't have problems with
            keeping up, almost regardless of the processor speed.
            If it does have 100mbit interfaces and you're not sure it will
            keep up, you can run a flood ping with big packets across it
            (<B
CLASS="COMMAND"
>ping -f -s 1450 <TT
CLASS="USERINPUT"
><B
>ipaddress</B
></TT
></B
>)
            and see whether it keeps up.
          </P
></DIV
></DIV
></DIV
><DIV
CLASS="QANDADIV"
><H3
><A
NAME="AEN926"
></A
>2. Software</H3
><DIV
CLASS="QANDAENTRY"
><DIV
CLASS="QUESTION"
><P
><A
NAME="AEN929"
></A
><B
> </B
>I'm running with kernel x.x.x.
            Is a patch out there, to give me chance to use this stuff?
          </P
></DIV
><DIV
CLASS="ANSWER"
><P
><B
> </B
>There are patches for and 2.2.14, 2.2.15.
             Since 2.3.47 it's in the mainstream kernel, so you don't need to
             patch.
             If you're talking about others, you will have to upgrade, if you
             need to bridge.
             <DIV
CLASS="NOTE"
><BLOCKQUOTE
CLASS="NOTE"
><P
><B
>Note: </B
>I've heared unconfirmed roumors about the 2.2.15 patches
                 working without any change also with the 2.2.16 kernel.
                 Anyone mind telling me about it?
               </P
></BLOCKQUOTE
></DIV
>
          </P
></DIV
></DIV
></DIV
></DIV
></DIV
></DIV
></BODY
></HTML
>